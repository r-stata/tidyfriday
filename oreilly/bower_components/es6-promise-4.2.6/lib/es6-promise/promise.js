import{isFunction}from"./utils";import{noop,nextId,PROMISE_ID,initializePromise}from"./-internal";import{asap,setAsap,setScheduler}from"./asap";import all from"./promise/all";import race from"./promise/race";import Resolve from"./promise/resolve";import Reject from"./promise/reject";import then from"./then";function needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}class Promise{constructor(e){this[PROMISE_ID]=nextId(),this._result=this._state=void 0,this._subscribers=[],noop!==e&&("function"!=typeof e&&needsResolver(),this instanceof Promise?initializePromise(this,e):needsNew())}catch(e){return this.then(null,e)}finally(t){var e=this;let r=e.constructor;return isFunction(t)?e.then(e=>r.resolve(t()).then(()=>e),e=>r.resolve(t()).then(()=>{throw e})):e.then(t,t)}}Promise.prototype.then=then;export default Promise;Promise.all=all,Promise.race=race,Promise.resolve=Resolve,Promise.reject=Reject,Promise._setScheduler=setScheduler,Promise._setAsap=setAsap,Promise._asap=asap;