"use strict";var assert=require("chai").assert,TokenStreamTransformer=require("./helper/token-stream-transformer"),TestCase=require("./helper/test-case");describe("The token stream transformer",function(){it("should handle all kinds of simple transformations",function(){assert.deepEqual(TokenStreamTransformer.simplify([{type:"type",content:"content"},"string"]),[["type","content"],"string"])}),it("should handle nested structures",function(){assert.deepEqual(TokenStreamTransformer.simplify([{type:"type",content:[{type:"insideType",content:[{type:"insideInsideType",content:"content"}]}]}]),[["type",[["insideType",[["insideInsideType","content"]]]]]])}),it("should strip empty tokens",function(){assert.deepEqual(TokenStreamTransformer.simplify(["","\r\n","\t"," "]),[])}),it("should strip empty token tree branches",function(){assert.deepEqual(TokenStreamTransformer.simplify([{type:"type",content:[["",""],"",{type:"nested",content:[""]}]},[[[[[[[""]]]]]]]]),[["type",[["nested",[]]]]])}),it("should ignore all properties in tokens except value and content",function(){assert.deepEqual(TokenStreamTransformer.simplify([{type:"type",content:"content",alias:"alias"}]),[["type","content"]])})}),describe("The language name parsing",function(){it("should use the last language as the main language if no language is specified",function(){assert.deepEqual(TestCase.parseLanguageNames("a"),{languages:["a"],mainLanguage:"a"}),assert.deepEqual(TestCase.parseLanguageNames("a+b+c"),{languages:["a","b","c"],mainLanguage:"c"})}),it("should use the specified language as main language",function(){assert.deepEqual(TestCase.parseLanguageNames("a+b!+c"),{languages:["a","b","c"],mainLanguage:"b"})}),it("should throw an error if there are multiple main languages",function(){assert.throw(function(){TestCase.parseLanguageNames("a+b!+c!")},"There are multiple main languages defined.")})});