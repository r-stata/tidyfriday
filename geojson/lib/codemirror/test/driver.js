var tests=[],debug=null,debugUsed=new Array,allNames=[];function Failure(e){this.message=e}function indexOf(e,n){if(e.indexOf)return e.indexOf(n);for(var t=0,i=e.length;t<i;++t)if(e[t]==n)return t;return-1}function test(e,n,t){for(var i=e,r=2;-1!==indexOf(allNames,e);)e=i+"_"+r,r++;return allNames.push(e),tests.push({name:e,func:n,expectedFail:t}),e}Failure.prototype.toString=function(){return this.message};var namespace="";function testCM(e,i,r,n){return test(namespace+e,function(){var e=document.getElementById("testground"),n=window.cm=CodeMirror(e,r),t=!1;try{i(n),t=!0}finally{debug&&!t||verbose?e.style.visibility="visible":e.removeChild(n.getWrapperElement())}},n)}function runTests(s){debug&&(0===indexOf(debug,"verbose")&&(verbose=!0,debug.splice(0,1)),debug.length<1&&(debug=null));var f=0;!function e(n){if(n===tests.length)return running=!1,s("done");var t=tests[n],i=t.expectedFail,r=+new Date;if(null!==debug)if(-1!==(l=indexOf(debug,t.name)))debug.splice(l,1);else{var u=t.name.split("_")[0]+"_*";if(-1!==(l=indexOf(debug,u)))debug.splice(l,1),debugUsed.push(u);else if(-1==indexOf(debugUsed,u))return e(n+1)}var l=!1;try{var a=t.func()}catch(e){l=!0,i?s("expected",t.name):e instanceof Failure?s("fail",t.name,e.message):(u=/\bat .*?([^\/:]+):(\d+):/.exec(e.stack),s("error",t.name,e.toString()+(u?" ("+u[1]+":"+u[2]+")":"")))}if(l||(i?s("fail",t.name,a||"expected failure, but succeeded"):s("ok",t.name,a)),quit)return running=!1,null;u=0;500<(f+=+new Date-r)&&(f=0,u=50),setTimeout(function(){e(n+1)},u)}(0)}function label(e,n){return n?e+" ("+n+")":e}function eq(e,n,t){if(e!=n)throw new Failure(label(e+" != "+n,t))}function eqPos(e,n,t){function i(e){return"{line:"+e.line+",ch:"+e.ch+"}"}if(e!=n){if(null==e)throw new Failure(label("comparing null to "+i(n),t));if(null==n)throw new Failure(label("comparing "+i(e)+" to null",t));if(e.line!=n.line||e.ch!=n.ch)throw new Failure(label(i(e)+" != "+i(n),t))}}function is(e,n){if(!e)throw new Failure(label("assertion failed",n))}function countTests(){if(!debug)return tests.length;for(var e=0,n=0;n<tests.length;++n){var t=tests[n].name;-1==indexOf(debug,t)&&-1==indexOf(debug,t.split("_")[0]+"_*")||++e}return e}