CodeMirror.defineMode("haskell",function(){function a(e,t,r){return t(r),r(e,t)}var i=/[a-z_]/,o=/[A-Z]/,l=/[0-9]/,u=/[0-9A-Fa-f]/,s=/[0-7]/,f=/[a-z_A-Z0-9']/,c=/[-!#$%&*+.\/<=>?@\\^|~:]/,d=/[(),;[\]`{}]/,m=/[ \t\v\f]/;function h(e,t){if(e.eatWhile(m))return null;var r=e.next();if(d.test(r))return"{"==r&&e.eat("-")?(n="comment",e.eat("#")&&(n="meta"),a(e,t,function a(i,o){if(0==o)return h;return function(e,t){for(var r=o;!e.eol();){var n=e.next();if("{"==n&&e.eat("-"))++r;else if("-"==n&&e.eat("}")&&0==--r)return t(h),i}return t(a(i,r)),i}}(n,1))):null;if("'"==r)return e.eat("\\"),e.next(),e.eat("'")?"string":"error";if('"'==r)return a(e,t,p);if(o.test(r))return e.eatWhile(f),e.eat(".")?"qualifier":"variable-2";if(i.test(r))return e.eatWhile(f),"variable";if(l.test(r)){if("0"==r){if(e.eat(/[xX]/))return e.eatWhile(u),"integer";if(e.eat(/[oO]/))return e.eatWhile(s),"number"}e.eatWhile(l);var n="number";return e.eat(".")&&(n="number",e.eatWhile(l)),e.eat(/[eE]/)&&(n="number",e.eat(/[-+]/),e.eatWhile(l)),n}return c.test(r)?"-"==r&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(c))?(e.skipToEnd(),"comment"):(n=":"==r?"variable-2":"variable",e.eatWhile(c),n):"error"}function p(e,t){for(;!e.eol();){var r=e.next();if('"'==r)return t(h),"string";if("\\"==r){if(e.eol()||e.eat(m))return t(n),"string";e.eat("&")||e.next()}}return t(h),"error"}function n(e,t){return e.eat("\\")?a(e,t,p):(e.next(),t(h),"error")}r={},e("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),e("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>"),e("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**"),e("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),e("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var r,g=r;function e(t){return function(){for(var e=0;e<arguments.length;e++)r[arguments[e]]=t}}return{startState:function(){return{f:h}},copyState:function(e){return{f:e.f}},token:function(e,t){var r=t.f(e,function(e){t.f=e}),e=e.current();return e in g?g[e]:r},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),CodeMirror.defineMIME("text/x-haskell","haskell");