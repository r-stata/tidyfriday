{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/sparql/sparql.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","PREFIX_START","PREFIX_REMAINDER","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatPnLocal","eatWhile","word","current","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/98.d1f2234a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sparql\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n    var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\", \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\", \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\", \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\", \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\", \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\", \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n    var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\", \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\", \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\", \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\", \"true\", \"false\", \"with\", \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\n    var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n    var PN_CHARS = \"[A-Za-z_\\\\-0-9]\";\n    var PREFIX_START = new RegExp(\"[A-Za-z]\");\n    var PREFIX_REMAINDER = new RegExp(\"((\" + PN_CHARS + \"|\\\\.)*(\" + PN_CHARS + \"))?:\");\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n      if (ch == \"$\" || ch == \"?\") {\n        if (ch == \"?\" && stream.match(/\\s/, false)) {\n          return \"operator\";\n        }\n        stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n        return \"variable-2\";\n      } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"bracket\";\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        return \"operator\";\n      } else if (ch == \":\") {\n        eatPnLocal(stream);\n        return \"atom\";\n      } else if (ch == \"@\") {\n        stream.eatWhile(/[a-z\\d\\-]/i);\n        return \"meta\";\n      } else if (PREFIX_START.test(ch) && stream.match(PREFIX_REMAINDER)) {\n        eatPnLocal(stream);\n        return \"atom\";\n      }\n      stream.eatWhile(/[_\\w\\d]/);\n      var word = stream.current();\n      if (ops.test(word)) return \"builtin\";else if (keywords.test(word)) return \"keyword\";else return \"variable\";\n    }\n    function eatPnLocal(stream) {\n      stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n    }\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n      };\n    }\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") popContext(state);\n          if (state.context && curPunc == state.context.type) {\n            popContext(state);\n            if (curPunc == \"}\" && state.context && state.context.type == \"pattern\") popContext(state);\n          }\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n});"],"sourceRoot":""}