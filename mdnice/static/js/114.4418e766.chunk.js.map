{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/velocity/velocity.js"],"names":["CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/114.4418e766.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      // start of unparsed string?\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      }\n      // start of parsed string?\n      else if (ch == '\"') {\n        state.lastTokenWasBuiltin = false;\n        if (state.inString) {\n          state.inString = false;\n          return \"string\";\n        } else if (state.inParams) return chain(stream, state, tokenString(ch));\n      }\n      // is it one of the special signs []{}().,;? Separator?\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n          state.inParams = false;\n          state.lastTokenWasBuiltin = true;\n        }\n        return null;\n      }\n      // start of a number value?\n      else if (/\\d/.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      // multi line comment?\n      else if (ch == \"#\" && stream.eat(\"*\")) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenComment);\n      }\n      // unparsed content?\n      else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenUnparsed);\n      }\n      // single line comment?\n      else if (ch == \"#\" && stream.eat(\"#\")) {\n        state.lastTokenWasBuiltin = false;\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      // variable?\n      else if (ch == \"$\") {\n        stream.eat(\"!\");\n        stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n        // is it one of the specials?\n        if (specials && specials.propertyIsEnumerable(stream.current())) {\n          return \"keyword\";\n        } else {\n          state.lastTokenWasBuiltin = true;\n          state.beforeParams = true;\n          return \"builtin\";\n        }\n      }\n      // is it a operator?\n      else if (isOperatorChar.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the whole word\n        stream.eatWhile(/[\\w\\$_{}@]/);\n        var word = stream.current();\n        // is it one of the listed keywords?\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n        // is it one of the listed functions?\n        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n          state.beforeParams = true;\n          state.lastTokenWasBuiltin = false;\n          return \"keyword\";\n        }\n        if (state.inString) {\n          state.lastTokenWasBuiltin = false;\n          return \"string\";\n        }\n        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\";\n        // default: just a \"word\"\n        state.lastTokenWasBuiltin = false;\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    // Interface\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});"],"sourceRoot":""}