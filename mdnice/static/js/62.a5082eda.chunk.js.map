{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/jinja2/jinja2.js"],"names":["CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","inbraces","inbrackets","lineTag","eat","column","sol","eol","RegExp","join","startState","tokenize","token","style","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/62.a5082eda.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function () {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\", \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n      operator = /^[+\\-*&%=<>!?|~^]/,\n      sign = /^[:\\[\\(\\{]/,\n      atom = [\"true\", \"false\"],\n      number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n    function tokenBase(stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n        //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (state.inbraces > 0 && ch == \")\") {\n          stream.next();\n          state.inbraces--;\n        } else if (ch == \"(\") {\n          stream.next();\n          state.inbraces++;\n        } else if (state.inbrackets > 0 && ch == \"]\") {\n          stream.next();\n          state.inbrackets--;\n        } else if (ch == \"[\") {\n          stream.next();\n          state.inbrackets++;\n        } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n            //allow nospace after tag before the keyword\n            return \"keyword\";\n          }\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n          //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n        //Line statements\n      } else if (stream.eat('#')) {\n        if (stream.peek() == '#') {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (!stream.eol()) {\n          state.intag = true;\n          state.lineTag = true;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          return \"tag\";\n        }\n      }\n      stream.next();\n    }\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          inbrackets: 0,\n          inbraces: 0\n        };\n      },\n      token: function token(stream, state) {\n        var style = state.tokenize(stream, state);\n        if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n          //Close line statement at the EOL\n          state.intag = false;\n          state.lineTag = false;\n        }\n        return style;\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\",\n      lineComment: \"##\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});"],"sourceRoot":""}