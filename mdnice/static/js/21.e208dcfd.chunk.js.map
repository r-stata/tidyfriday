{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/factor/factor.js","../node_modules/_codemirror@5.65.12@codemirror/addon/mode/simple.js"],"names":["CodeMirror","defineSimpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","meta","dontIndentStates","lineComment","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","unicode","source","String","Rule","data","push","this","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","index","curState","rule","matches","sol","pop","enterLocalMode","indent","indentation","indentUnit","dedent","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","textAfter","line","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode"],"mappings":"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","file":"static/js/21.e208dcfd.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are initially used\n    start: [\n    // comments\n    {\n      regex: /#?!.*/,\n      token: \"comment\"\n    },\n    // strings \"\"\", multiline --> state\n    {\n      regex: /\"\"\"/,\n      token: \"string\",\n      next: \"string3\"\n    }, {\n      regex: /(STRING:)(\\s)/,\n      token: [\"keyword\", null],\n      next: \"string2\"\n    }, {\n      regex: /\\S*?\"/,\n      token: \"string\",\n      next: \"string\"\n    },\n    // numbers: dec, hex, unicode, bin, fractional, complex\n    {\n      regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n      token: \"number\"\n    },\n    //{regex: /[+-]?/} //fractional\n    // definition: defining word, defined word, etc\n    {\n      regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n      token: [\"keyword\", null, \"def\", null, \"bracket\"],\n      next: \"stack\"\n    },\n    // method definition: defining word, type, defined word, etc\n    {\n      regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n      token: [\"keyword\", null, \"def\", null, \"tag\"]\n    },\n    // vocabulary using --> state\n    {\n      regex: /USING\\:/,\n      token: \"keyword\",\n      next: \"vocabulary\"\n    },\n    // vocabulary definition/use\n    {\n      regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"tag\"]\n    },\n    // definition: a defining word, defined word\n    {\n      regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"def\"]\n    },\n    // \"keywords\", incl. ; t f . [ ] { } defining words\n    {\n      regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n      token: \"keyword\"\n    },\n    // <constructors> and the like\n    {\n      regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n      token: \"builtin\"\n    }, {\n      regex: /[\\)><]+\\S+(?=\\s|$)/,\n      token: \"builtin\"\n    },\n    // operators\n    {\n      regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n      token: \"keyword\"\n    },\n    // any id (?)\n    {\n      regex: /\\S+/,\n      token: \"variable\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    vocabulary: [{\n      regex: /;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /\\S+/,\n      token: \"tag\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    string: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string2: [{\n      regex: /^;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string3: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    stack: [{\n      regex: /\\)/,\n      token: \"bracket\",\n      next: \"start\"\n    }, {\n      regex: /--/,\n      token: \"bracket\"\n    }, {\n      regex: /\\S+/,\n      token: \"meta\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: \"!\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n      meta = states.meta || {},\n      hasIndentation = false;\n    for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n      var list = states_[state] = [],\n        orig = states[state];\n      for (var i = 0; i < orig.length; i++) {\n        var data = orig[i];\n        list.push(new Rule(data, states));\n        if (data.indent || data.dedent) hasIndentation = true;\n      }\n    }\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n        for (var pers = state.persistentStates; pers; pers = pers.next) s.persistentStates = {\n          mode: pers.mode,\n          spec: pers.spec,\n          state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n          next: s.persistentStates\n        };\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    return mode;\n  };\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      if (val.unicode) flags += \"u\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n    for (var i = 0; i < val.length; i++) result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    return result;\n  }\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n            m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n      var curState = states[state.state];\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            for (var j = 2; j < matches.length; j++) if (matches[j]) (state.pending || (state.pending = [])).push({\n              text: matches[j],\n              token: rule.token[j - 1]\n            });\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n      stream.next();\n      return null;\n    };\n  }\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n    for (var prop in a) if (a.hasOwnProperty(prop)) {\n      if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n      props++;\n    }\n    for (var prop in b) if (b.hasOwnProperty(prop)) props--;\n    return props == 0;\n  }\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) if (arr[i] === val) return true;\n  }\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n        rules = states[state.state];\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n        break;\n      }\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});"],"sourceRoot":""}