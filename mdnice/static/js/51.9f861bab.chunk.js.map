{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/fcl/fcl.js"],"names":["CodeMirror","defineMode","config","indentUnit","keywords","term","method","accu","rule","then","is","and","or","if","default","start_blocks","var_input","var_output","fuzzify","defuzzify","function_block","ruleblock","end_blocks","end_ruleblock","end_defuzzify","end_function_block","end_fuzzify","end_var","atoms","true","false","nan","real","min","max","cog","cogs","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","startState","basecolumn","context","startOfLine","token","ctx","sol","indentation","eatSpace","style","col","pushContext","popContext","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/51.9f861bab.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fcl\", function (config) {\n    var indentUnit = config.indentUnit;\n    var keywords = {\n      \"term\": true,\n      \"method\": true,\n      \"accu\": true,\n      \"rule\": true,\n      \"then\": true,\n      \"is\": true,\n      \"and\": true,\n      \"or\": true,\n      \"if\": true,\n      \"default\": true\n    };\n    var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n    };\n    var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n    };\n    var atoms = {\n      \"true\": true,\n      \"false\": true,\n      \"nan\": true,\n      \"real\": true,\n      \"min\": true,\n      \"max\": true,\n      \"cog\": true,\n      \"cogs\": true\n    };\n    var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") {\n          stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        } else if (ch == \"0\") {\n          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        } else {\n          stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        }\n        return \"number\";\n      }\n      if (ch == \"/\" || ch == \"(\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current().toLowerCase();\n      if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      }\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n    function popContext(state) {\n      if (!state.context.prev) return;\n      var t = state.context.type;\n      if (t == \"end_block\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    // Interface\n\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        var cur = stream.current().toLowerCase();\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");else if (end_blocks.propertyIsEnumerable(cur)) popContext(state);\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var ctx = state.context;\n        var closing = end_blocks.propertyIsEnumerable(textAfter);\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"ryk\",\n      fold: \"brace\",\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});"],"sourceRoot":""}