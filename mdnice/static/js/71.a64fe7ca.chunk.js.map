{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/mscgen/mscgen.js"],"names":["CodeMirror","languages","mscgen","keywords","options","constants","attributes","brackets","arcsWords","arcsOthers","singlecomment","operators","xu","msgenny","wordRegexpBoundary","pWords","RegExp","join","wordRegexp","startStateFn","inComment","inString","inAttributeList","inScript","copyStateFn","pState","defineMode","_","modeConfig","pConfig","language","startState","copyState","token","pStream","match","skipToEnd","next","lineComment","blockCommentStart","blockCommentEnd","defineMIME","name","mod","__webpack_require__"],"mappings":"+EAmBC,SAAAA,GACD,aAEA,IAAAC,EAAA,CACAC,OAAA,CACAC,SAAA,QACAC,QAAA,gDACAC,UAAA,4BACAC,WAAA,uNACAC,SAAA,OAAuB,OAEvBC,UAAA,6BACAC,WAAA,uJACAC,cAAA,WACAC,UAAA,OAEAC,GAAA,CACAT,SAAA,aACAC,QAAA,+EACAC,UAAA,mCACAC,WAAA,oQACAC,SAAA,OAAuB,OAEvBC,UAAA,8IACAC,WAAA,uJACAC,cAAA,WACAC,UAAA,OAEAE,QAAA,CACAV,SAAA,KACAC,QAAA,+EACAC,UAAA,mCACAC,WAAA,KACAC,SAAA,OAAuB,OACvBC,UAAA,8IACAC,WAAA,uJACAC,cAAA,WACAC,UAAA,QAuBA,SAAAG,EAAAC,GACA,WAAAC,OAAA,UAAAD,EAAAE,KAAA,iBAEA,SAAAC,EAAAH,GACA,WAAAC,OAAA,OAAAD,EAAAE,KAAA,cAEA,SAAAE,IACA,OACAC,WAAA,EACAC,UAAA,EACAC,iBAAA,EACAC,UAAA,GAGA,SAAAC,EAAAC,GACA,OACAL,UAAAK,EAAAL,UACAC,SAAAI,EAAAJ,SACAC,gBAAAG,EAAAH,gBACAC,SAAAE,EAAAF,UAvCAvB,EAAA0B,WAAA,kBAAAC,EAAAC,GACA,IAyCAC,EAzCAC,EAAA7B,EAAA2B,KAAAE,UAAA,UACA,OACAC,WAAAZ,EACAa,UAAAR,EACAS,OAqCAJ,EArCAC,EAsCA,SAAAI,EAAAT,GACA,GAAAS,EAAAC,MAAAjB,EAAAW,EAAAtB,WAAA,MACA,gBAGA,IAAAkB,EAAAL,UAAA,CACA,GAAAc,EAAAC,MAAA,sBAEA,OADAV,EAAAL,WAAA,EACA,UAEA,GAAAc,EAAAC,MAAAjB,EAAAW,EAAAnB,gBAAA,MAEA,OADAwB,EAAAE,YACA,UAGA,GAAAX,EAAAL,UAEA,OADAc,EAAAC,MAAA,sBAAAV,EAAAL,WAAA,EAAgFc,EAAAE,YAChF,UAGA,IAAAX,EAAAJ,UAAAa,EAAAC,MAAA,yBAEA,OADAV,EAAAJ,UAAA,EACA,SAEA,GAAAI,EAAAJ,SAEA,OADAa,EAAAC,MAAA,kBAAAV,EAAAJ,UAAA,EAA2Ea,EAAAE,YAC3E,SAGA,GAAAP,EAAA1B,UAAA+B,EAAAC,MAAArB,EAAAe,EAAA1B,WAAA,sBACA,GAAA+B,EAAAC,MAAArB,EAAAe,EAAAzB,UAAA,sBACA,GAAA8B,EAAAC,MAAArB,EAAAe,EAAArB,YAAA,sBACA,GAAA0B,EAAAC,MAAAjB,EAAAW,EAAApB,aAAA,sBACA,GAAAoB,EAAAlB,WAAAuB,EAAAC,MAAAjB,EAAAW,EAAAlB,YAAA,uBACA,GAAAkB,EAAAxB,WAAA6B,EAAAC,MAAAjB,EAAAW,EAAAxB,YAAA,uBAGA,IAAAwB,EAAAP,iBAAAO,EAAAvB,YAAA4B,EAAAC,MAAA,WAEA,OADAN,EAAAP,iBAAA,EACA,UAEA,GAAAO,EAAAP,gBAAA,CACA,UAAAO,EAAAvB,YAAA4B,EAAAC,MAAArB,EAAAe,EAAAvB,aAAA,MACA,kBAEA,GAAA4B,EAAAC,MAAA,WAEA,OADAN,EAAAP,iBAAA,EACA,UAIA,OADAY,EAAAG,OACA,SAxFAC,YAAA,IACAC,kBAAA,KACAC,gBAAA,QAGAxC,EAAAyC,WAAA,0BACAzC,EAAAyC,WAAA,aACAC,KAAA,SACAZ,SAAA,OAEA9B,EAAAyC,WAAA,kBACAC,KAAA,SACAZ,SAAA,YA/DAa,CAAQC,EAAQ","file":"static/js/71.a64fe7ca.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// mode(s) for the sequence chart dsl's mscgen, x√π and msgenny\n// For more information on mscgen, see the site of the original author:\n// http://www.mcternan.me.uk/mscgen\n//\n// This mode for mscgen and the two derivative languages were\n// originally made for use in the mscgen_js interpreter\n// (https://sverweij.github.io/mscgen_js)\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var languages = {\n    mscgen: {\n      \"keywords\": [\"msc\"],\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\"],\n      \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    },\n    xu: {\n      \"keywords\": [\"msc\", \"xu\"],\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      // [ and  ] are brackets too, but these get handled in with lists\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    },\n    msgenny: {\n      \"keywords\": null,\n      \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n      \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n      \"attributes\": null,\n      \"brackets\": [\"\\\\{\", \"\\\\}\"],\n      \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n      \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n      \"singlecomment\": [\"//\", \"#\"],\n      \"operators\": [\"=\"]\n    }\n  };\n  CodeMirror.defineMode(\"mscgen\", function (_, modeConfig) {\n    var language = languages[modeConfig && modeConfig.language || \"mscgen\"];\n    return {\n      startState: startStateFn,\n      copyState: copyStateFn,\n      token: produceTokenFunction(language),\n      lineComment: \"#\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-mscgen\", \"mscgen\");\n  CodeMirror.defineMIME(\"text/x-xu\", {\n    name: \"mscgen\",\n    language: \"xu\"\n  });\n  CodeMirror.defineMIME(\"text/x-msgenny\", {\n    name: \"mscgen\",\n    language: \"msgenny\"\n  });\n  function wordRegexpBoundary(pWords) {\n    return new RegExp(\"^\\\\b(?:\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n  }\n  function wordRegexp(pWords) {\n    return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n  }\n  function startStateFn() {\n    return {\n      inComment: false,\n      inString: false,\n      inAttributeList: false,\n      inScript: false\n    };\n  }\n  function copyStateFn(pState) {\n    return {\n      inComment: pState.inComment,\n      inString: pState.inString,\n      inAttributeList: pState.inAttributeList,\n      inScript: pState.inScript\n    };\n  }\n  function produceTokenFunction(pConfig) {\n    return function (pStream, pState) {\n      if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n        return \"bracket\";\n      }\n      /* comments */\n      if (!pState.inComment) {\n        if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n          pState.inComment = true;\n          return \"comment\";\n        }\n        if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n          pStream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (pState.inComment) {\n        if (pStream.match(/[^\\*\\/]*\\*\\//, true, true)) pState.inComment = false;else pStream.skipToEnd();\n        return \"comment\";\n      }\n      /* strings */\n      if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n        pState.inString = true;\n        return \"string\";\n      }\n      if (pState.inString) {\n        if (pStream.match(/[^\\\"]*\\\"/, true, true)) pState.inString = false;else pStream.skipToEnd();\n        return \"string\";\n      }\n      /* keywords & operators */\n      if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexpBoundary(pConfig.options), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true)) return \"keyword\";\n      if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true)) return \"keyword\";\n      if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true)) return \"operator\";\n      if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true)) return \"variable\";\n\n      /* attribute lists */\n      if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n        pConfig.inAttributeList = true;\n        return \"bracket\";\n      }\n      if (pConfig.inAttributeList) {\n        if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n          return \"attribute\";\n        }\n        if (pStream.match(']', true, true)) {\n          pConfig.inAttributeList = false;\n          return \"bracket\";\n        }\n      }\n      pStream.next();\n      return \"base\";\n    };\n  }\n});"],"sourceRoot":""}