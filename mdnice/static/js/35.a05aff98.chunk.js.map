{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/cmake/cmake.js"],"names":["CodeMirror","defineMode","variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","startState","inDefinition","inInclude","token","eatSpace","ch","match","skipToEnd","eatWhile","tokenize","defineMIME","mod","__webpack_require__"],"mappings":"+EAKC,SAAAA,GACD,aAEAA,EAAAC,WAAA,mBACA,IAAAC,EAAA,wBACA,SAAAC,EAAAC,EAAAC,GAIA,IAHA,IAAAC,EACAC,EACAC,GAAA,GACAJ,EAAAK,QAAAH,EAAAF,EAAAM,SAAAL,EAAAM,SAAA,CACA,SAAAL,GAAA,MAAAC,GAAA,KAAAF,EAAAM,QAAA,CACAH,GAAA,EACA,MAEAD,EAAAD,EAUA,OARAE,GACAJ,EAAAQ,OAAA,GAEAN,GAAAD,EAAAM,QACAN,EAAAQ,gBAAA,EAEAR,EAAAQ,gBAAA,EAEA,SA4CA,OACAC,WAAA,WACA,IAAAT,EAAA,CACAU,cAAA,EACAC,WAAA,EACAH,gBAAA,EACAF,SAAA,GACA,OAAAN,GAEAY,MAAA,SAAAb,EAAAC,GACA,OAAAD,EAAAc,WAAA,KApDA,SAAAd,EAAAC,GACA,IAAAc,EAAAf,EAAAM,OAGA,YAAAS,EACAf,EAAAgB,MAAAlB,GACA,aAEA,WAGAG,EAAAQ,gBAEAT,EAAAQ,OAAA,GACAT,EAAAC,EAAAC,IAIAD,EAAAgB,MAAA,gBAAAhB,EAAAgB,MAAA,kBACAhB,EAAAQ,OAAA,GACA,OAEA,KAAAO,GACAf,EAAAiB,YACA,WAGA,KAAAF,GAAA,KAAAA,GAEAd,EAAAM,QAAAQ,EAEAhB,EAAAC,EAAAC,IAEA,KAAAc,GAAA,KAAAA,EACA,UAEAA,EAAAC,MAAA,SACA,UAEAhB,EAAAkB,SAAA,SACA,MAaAC,CAAAnB,EAAAC,OAIAL,EAAAwB,WAAA,wBApF6DC,CAAMC,EAAQ","file":"static/js/35.a05aff98.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"cmake\", function () {\n    var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n    function tokenString(stream, state) {\n      var current,\n        prev,\n        found_var = false;\n      while (!stream.eol() && (current = stream.next()) != state.pending) {\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n          found_var = true;\n          break;\n        }\n        prev = current;\n      }\n      if (found_var) {\n        stream.backUp(1);\n      }\n      if (current == state.pending) {\n        state.continueString = false;\n      } else {\n        state.continueString = true;\n      }\n      return \"string\";\n    }\n    function tokenize(stream, state) {\n      var ch = stream.next();\n\n      // Have we found a variable?\n      if (ch === '$') {\n        if (stream.match(variable_regex)) {\n          return 'variable-2';\n        }\n        return 'variable';\n      }\n      // Should we still be looking for the end of a string?\n      if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return tokenString(stream, state);\n      }\n      // Do we just have a function on our hands?\n      // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n      if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n        stream.backUp(1);\n        return 'def';\n      }\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      // Have we found a string?\n      if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch;\n        // Perform the looping function to find the end\n        return tokenString(stream, state);\n      }\n      if (ch == '(' || ch == ')') {\n        return 'bracket';\n      }\n      if (ch.match(/[0-9]/)) {\n        return 'number';\n      }\n      stream.eatWhile(/[\\w-]/);\n      return null;\n    }\n    return {\n      startState: function startState() {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n});"],"sourceRoot":""}