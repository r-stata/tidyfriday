{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/julia/julia.js"],"names":["CodeMirror","defineMode","config","parserConf","wordRegexp","words","end","pre","RegExp","join","asciiOperatorsList","operators","delimiters","identifiers","chars","keywordsList","builtinsList","registerHelper","concat","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","macroOperators","symbolOperators","inArray","state","nestedArrays","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","delimiter","ch","peek","skipToEnd","push","nestedGenerators","pop","inGenerator","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","current","substr","eat","next","eatWhile","isDefinition","nestedParameters","nestedComments","isChar","value","parseInt","external","startState","firstParenPos","token","style","indent","textAfter","delta","test","indentUnit","electricInput","blockCommentStart","blockCommentEnd","lineComment","closeBrackets","fold","defineMIME","mod","__webpack_require__"],"mappings":"+EAWC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBAAAC,EAAAC,GACA,SAAAC,EAAAC,EAAAC,EAAAC,GAOA,MANA,qBAAAA,IACAA,EAAA,IAEA,qBAAAD,IACAA,EAAA,OAEA,IAAAE,OAAA,IAAAD,EAAA,KAAAF,EAAAI,KAAA,YAAAH,GAEA,IAIAI,EAAA,6EAAgH,kDAChHC,EAAAR,EAAAQ,WAAAP,EAAA,iVACAQ,EAAAT,EAAAS,YAAA,eACAC,EAAAV,EAAAU,aAAA,wEACAC,EAAAV,EAAA,CARA,iBACA,wBACA,2BACA,yEAKA,KAGAW,EAAA,8TACAC,EAAA,uCACAhB,EAAAiB,eAAA,oBAAAF,EAAAG,OAAAF,IACA,IAAAG,EAAAf,EALA,wIAMAgB,EAAAhB,EALA,2CAMAiB,EAAAjB,EAAAW,GACAO,EAAAlB,EAAAY,GACAO,EAAA,+CACAC,EAAA,+CACAC,EAAA,uCACAC,EAAAtB,EAAAM,EAAA,QACAiB,EAAAvB,EAAAM,EAAA,QACA,SAAAkB,EAAAC,GACA,OAAAA,EAAAC,aAAA,EAKA,SAAAC,EAAAF,EAAAG,GAIA,MAHA,qBAAAA,IACAA,EAAA,GAEAH,EAAAI,OAAAC,QAAAF,EACA,KAEAH,EAAAI,OAAAJ,EAAAI,OAAAC,QAAAF,EAAA,IAIA,SAAAG,EAAAC,EAAAP,GAEA,GAAAO,EAAAC,MAAA,SAEA,OADAR,EAAAS,SAAAC,EACAV,EAAAS,SAAAF,EAAAP,GAIA,IAAAW,EAAAX,EAAAW,YAKA,GAJAJ,EAAAK,QACAD,GAAA,GAEAX,EAAAW,aAAA,EACAA,GACAJ,EAAAC,MAAA,OACA,iBAGA,GAAAD,EAAAC,MAAA,UACA,cACO,GAAAD,EAAAC,MAAA,WACP,iBAEA,GAAAD,EAAAM,WACA,YAEA,IAuCAL,EAkKAM,EAzMAC,EAAAR,EAAAS,OAGA,SAAAD,EAEA,OADAR,EAAAU,YACA,UAUA,GARA,MAAAF,IACAf,EAAAI,OAAAc,KAAA,KACAlB,EAAAC,gBAEA,MAAAc,IACAf,EAAAI,OAAAc,KAAA,KACAlB,EAAAmB,oBAEApB,EAAAC,IAAA,MAAAe,EAAA,CACA,KAAAf,EAAAI,OAAAC,QAAA,MAAAH,EAAAF,IACAA,EAAAI,OAAAgB,MAEApB,EAAAI,OAAAgB,MACApB,EAAAC,eACAD,EAAAW,aAAA,EAEA,GA/DA,SAAAX,GACA,OAAAA,EAAAmB,iBAAA,EA8DAE,CAAArB,IAAA,MAAAe,EAAA,CACA,KAAAf,EAAAI,OAAAC,QAAA,MAAAH,EAAAF,IACAA,EAAAI,OAAAgB,MAEApB,EAAAI,OAAAgB,MACApB,EAAAmB,mBACAnB,EAAAW,aAAA,EAEA,GAAAZ,EAAAC,GAAA,CACA,UAAAA,EAAAsB,WAAAf,EAAAC,MAAA,KACA,iBAEA,GAAAD,EAAAC,MAAA,OACA,eAYA,IARAA,EAAAD,EAAAC,MAAAlB,GAAA,KACAU,EAAAI,OAAAc,KAAAV,EAAA,IAEAD,EAAAC,MAAAjB,GAAA,IACAS,EAAAI,OAAAgB,MAIAb,EAAAC,MAAA,gBAEA,OADAR,EAAAS,SAAAc,EACAvB,EAAAS,SAAAF,EAAAP,GAIA,IAAAW,IAAAJ,EAAAC,MAAAb,IAAAY,EAAAC,MAAAV,IACA,gBASA,GAAAS,EAAAC,MAAA1B,GACA,iBAIA,GAAAyB,EAAAC,MAAA,cACA,IAAAgB,EAAA7C,OAAA,SACA8C,GAAA,EAqBA,GApBAlB,EAAAC,MAAA,oCACAiB,GAAA,GAGAlB,EAAAC,MAAA,oBACAiB,GAAA,GAEAlB,EAAAC,MAAA,gBACAiB,GAAA,GAEAlB,EAAAC,MAAA,iBACAiB,GAAA,GAGAlB,EAAAC,MAAA,iGACAiB,GAAA,GAEAlB,EAAAC,MAAA,8BACAiB,GAAA,GAEAA,EAIA,OAFAlB,EAAAC,MAAAgB,GACAxB,EAAAW,aAAA,EACA,SAKA,GAAAJ,EAAAC,MAAA,KAEA,OADAR,EAAAS,SAAAiB,EACA1B,EAAAS,SAAAF,EAAAP,GAIA,GAAAO,EAAAC,MAAAZ,GAEA,OADAI,EAAAS,UA8FA,SADAK,EA7FAP,EAAAoB,WA8FAC,QAAA,GACAd,EAAA,MACO,MAAAA,EAAAc,QAAA,KACPd,EAAA,KAEA,SAAAP,EAAAP,GACA,GAAAO,EAAAsB,IAAA,MACAtB,EAAAuB,WACS,IAAAvB,EAAAC,MAAAM,GAGT,OAFAd,EAAAS,SAAAH,EACAN,EAAAW,aAAA,EACA,SAEAJ,EAAAsB,IAAA,QAGA,OADAtB,EAAAwB,SAAA,WACA,WA7GA/B,EAAAS,SAAAF,EAAAP,GAEA,GAAAO,EAAAC,MAAAd,IAAAa,EAAAC,MAAAX,GACA,aAEA,GAAAU,EAAAC,MAAAzB,GACA,YAEA,GAAAwB,EAAAC,MAAAhB,GACA,gBAEA,GAAAe,EAAAC,MAAAf,GACA,gBAEA,IAAAuC,EAAAhC,EAAAgC,cAAA,YAAAhC,EAAAsB,WAAA,SAAAtB,EAAAsB,WAAA,QAAAtB,EAAAsB,WAAA,UAAAtB,EAAAsB,WAAA,aAAAtB,EAAAsB,UACA,OAAAf,EAAAC,MAAAxB,GACAgD,EACA,MAAAzB,EAAAS,QACAhB,EAAAgC,cAAA,EACA,aAEAhC,EAAAgC,cAAA,EACA,QAEAhC,EAAAW,aAAA,EACA,aAIAJ,EAAAuB,OACA,SAEA,SAAAP,EAAAhB,EAAAP,GAYA,OAXAO,EAAAC,MAAA,wBACAD,EAAAC,MAAA,KACAR,EAAAiC,mBACO1B,EAAAC,MAAA,MAAyBR,EAAAiC,iBAAA,GAChCjC,EAAAiC,mBAEAjC,EAAAiC,iBAAA,EACA1B,EAAAC,MAAA,eAA+BD,EAAAuB,OACxB,GAAA9B,EAAAiC,mBACPjC,EAAAS,SAAAH,GAEA,UAEA,SAAAI,EAAAH,EAAAP,GAWA,OAVAO,EAAAC,MAAA,OACAR,EAAAkC,iBAEA3B,EAAAC,MAAA,mBACAD,EAAAU,YAEAV,EAAAC,MAAA,QACAR,EAAAkC,iBACA,GAAAlC,EAAAkC,iBAAAlC,EAAAS,SAAAH,IAEA,UAEA,SAAAoB,EAAAnB,EAAAP,GACA,IACAQ,EADA2B,GAAA,EAEA,GAAA5B,EAAAC,MAAAvB,GACAkD,GAAA,OACO,GAAA3B,EAAAD,EAAAC,MAAA,4BAAiD,CACxD,IAAA4B,EAAAC,SAAA7B,EAAA,QACA4B,GAAA,OAAAA,GAAA,SAEAD,GAAA,EACA5B,EAAAuB,aAEO,GAAAtB,EAAAD,EAAAC,MAAA,8BAAoD,CAC3D,IAAA4B,EAAAC,SAAA7B,EAAA,OACA4B,GAAA,UAEAD,GAAA,EACA5B,EAAAuB,QAGA,OAAAK,GACAnC,EAAAW,aAAA,EACAX,EAAAS,SAAAH,EACA,WAEAC,EAAAC,MAAA,gBACAD,EAAAU,YAEAV,EAAAC,MAAA,OACAR,EAAAS,SAAAH,GAEA,SAuBA,IAAAgC,EAAA,CACAC,WAAA,WACA,OACA9B,SAAAH,EACAF,OAAA,GACAkB,UAAA,KACAX,aAAA,EACAqB,cAAA,EACA/B,aAAA,EACAiC,eAAA,EACAf,iBAAA,EACAc,iBAAA,EACAO,eAAA,IAGAC,MAAA,SAAAlC,EAAAP,GACA,IAAA0C,EAAA1C,EAAAS,SAAAF,EAAAP,GACA2B,EAAApB,EAAAoB,UAIA,OAHAA,GAAAe,IACA1C,EAAAsB,UAAAK,GAEAe,GAEAC,OAAA,SAAA3C,EAAA4C,GACA,IAAAC,EAAA,EAIA,OAHA,MAAAD,GAAA,MAAAA,GAAA,SAAAE,KAAAF,IAAA,QAAAE,KAAAF,IAAA,WAAAE,KAAAF,IAAA,YAAAE,KAAAF,IAAA,WAAAE,KAAAF,MACAC,GAAA,IAEA7C,EAAAI,OAAAC,OAAAwC,GAAAxE,EAAA0E,YAEAC,cAAA,+BACAC,kBAAA,KACAC,gBAAA,KACAC,YAAA,IACAC,cAAA,WACAC,KAAA,UAEA,OAAAf,IAEAnE,EAAAmF,WAAA,wBAzVAC,CAAQC,EAAQ","file":"static/js/63.eeacbcca.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"julia\", function (config, parserConf) {\n    function wordRegexp(words, end, pre) {\n      if (typeof pre === \"undefined\") {\n        pre = \"\";\n      }\n      if (typeof end === \"undefined\") {\n        end = \"\\\\b\";\n      }\n      return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n    }\n    var octChar = \"\\\\\\\\[0-7]{1,3}\";\n    var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n    var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n    var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n    var asciiOperatorsList = [\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"];\n    var operators = parserConf.operators || wordRegexp([\"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n    var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n    var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n    var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\n    var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n    var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\n    var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n    CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n    var openers = wordRegexp(openersList);\n    var closers = wordRegexp(closersList);\n    var keywords = wordRegexp(keywordsList);\n    var builtins = wordRegexp(builtinsList);\n    var macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n    var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n    var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n    var macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\n    var symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n    function inArray(state) {\n      return state.nestedArrays > 0;\n    }\n    function inGenerator(state) {\n      return state.nestedGenerators > 0;\n    }\n    function currentScope(state, n) {\n      if (typeof n === \"undefined\") {\n        n = 0;\n      }\n      if (state.scopes.length <= n) {\n        return null;\n      }\n      return state.scopes[state.scopes.length - (n + 1)];\n    }\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      // Handle multiline comments\n      if (stream.match('#=', false)) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle scope changes\n      var leavingExpr = state.leavingExpr;\n      if (stream.sol()) {\n        leavingExpr = false;\n      }\n      state.leavingExpr = false;\n      if (leavingExpr) {\n        if (stream.match(/^'+/)) {\n          return \"operator\";\n        }\n      }\n      if (stream.match(/\\.{4,}/)) {\n        return \"error\";\n      } else if (stream.match(/\\.{1,3}/)) {\n        return \"operator\";\n      }\n      if (stream.eatSpace()) {\n        return null;\n      }\n      var ch = stream.peek();\n\n      // Handle single line comments\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch === '[') {\n        state.scopes.push('[');\n        state.nestedArrays++;\n      }\n      if (ch === '(') {\n        state.scopes.push('(');\n        state.nestedGenerators++;\n      }\n      if (inArray(state) && ch === ']') {\n        while (state.scopes.length && currentScope(state) !== \"[\") {\n          state.scopes.pop();\n        }\n        state.scopes.pop();\n        state.nestedArrays--;\n        state.leavingExpr = true;\n      }\n      if (inGenerator(state) && ch === ')') {\n        while (state.scopes.length && currentScope(state) !== \"(\") {\n          state.scopes.pop();\n        }\n        state.scopes.pop();\n        state.nestedGenerators--;\n        state.leavingExpr = true;\n      }\n      if (inArray(state)) {\n        if (state.lastToken == \"end\" && stream.match(':')) {\n          return \"operator\";\n        }\n        if (stream.match('end')) {\n          return \"number\";\n        }\n      }\n      var match;\n      if (match = stream.match(openers, false)) {\n        state.scopes.push(match[0]);\n      }\n      if (stream.match(closers, false)) {\n        state.scopes.pop();\n      }\n\n      // Handle type annotations\n      if (stream.match(/^::(?![:\\$])/)) {\n        state.tokenize = tokenAnnotation;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle symbols\n      if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n        return \"builtin\";\n      }\n\n      // Handle parametric types\n      //if (stream.match(/^{[^}]*}(?=\\()/)) {\n      //  return \"builtin\";\n      //}\n\n      // Handle operators and Delimiters\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Handle Number Literals\n      if (stream.match(/^\\.?\\d/, false)) {\n        var imMatcher = RegExp(/^im\\b/);\n        var numberLiteral = false;\n        if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n          numberLiteral = true;\n        }\n        // Integers\n        if (stream.match(/^0x[0-9a-f_]+/i)) {\n          numberLiteral = true;\n        } // Hex\n        if (stream.match(/^0b[01_]+/i)) {\n          numberLiteral = true;\n        } // Binary\n        if (stream.match(/^0o[0-7_]+/i)) {\n          numberLiteral = true;\n        } // Octal\n        // Floats\n        if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n          numberLiteral = true;\n        }\n        if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n          numberLiteral = true;\n        } // Decimal\n        if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n        }\n      }\n\n      // Handle Chars\n      if (stream.match('\\'')) {\n        state.tokenize = tokenChar;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n      if (stream.match(macro) || stream.match(macroOperators)) {\n        return \"meta\";\n      }\n      if (stream.match(delimiters)) {\n        return null;\n      }\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n      if (stream.match(builtins)) {\n        return \"builtin\";\n      }\n      var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n      if (stream.match(identifiers)) {\n        if (isDefinition) {\n          if (stream.peek() === '.') {\n            state.isDefinition = true;\n            return \"variable\";\n          }\n          state.isDefinition = false;\n          return \"def\";\n        }\n        state.leavingExpr = true;\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n    function tokenAnnotation(stream, state) {\n      stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n      if (stream.match('{')) {\n        state.nestedParameters++;\n      } else if (stream.match('}') && state.nestedParameters > 0) {\n        state.nestedParameters--;\n      }\n      if (state.nestedParameters > 0) {\n        stream.match(/.*?(?={|})/) || stream.next();\n      } else if (state.nestedParameters == 0) {\n        state.tokenize = tokenBase;\n      }\n      return \"builtin\";\n    }\n    function tokenComment(stream, state) {\n      if (stream.match('#=')) {\n        state.nestedComments++;\n      }\n      if (!stream.match(/.*?(?=(#=|=#))/)) {\n        stream.skipToEnd();\n      }\n      if (stream.match('=#')) {\n        state.nestedComments--;\n        if (state.nestedComments == 0) state.tokenize = tokenBase;\n      }\n      return \"comment\";\n    }\n    function tokenChar(stream, state) {\n      var isChar = false,\n        match;\n      if (stream.match(chars)) {\n        isChar = true;\n      } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 55295 || value >= 57344) {\n          // (U+0,U+D7FF), (U+E000,U+FFFF)\n          isChar = true;\n          stream.next();\n        }\n      } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 1114111) {\n          // U+10FFFF\n          isChar = true;\n          stream.next();\n        }\n      }\n      if (isChar) {\n        state.leavingExpr = true;\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n      if (!stream.match(/^[^']+(?=')/)) {\n        stream.skipToEnd();\n      }\n      if (stream.match('\\'')) {\n        state.tokenize = tokenBase;\n      }\n      return \"error\";\n    }\n    function tokenStringFactory(delimiter) {\n      if (delimiter.substr(-3) === '\"\"\"') {\n        delimiter = '\"\"\"';\n      } else if (delimiter.substr(-1) === '\"') {\n        delimiter = '\"';\n      }\n      function tokenString(stream, state) {\n        if (stream.eat('\\\\')) {\n          stream.next();\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          state.leavingExpr = true;\n          return \"string\";\n        } else {\n          stream.eat(/[`\"]/);\n        }\n        stream.eatWhile(/[^\\\\`\"]/);\n        return \"string\";\n      }\n      return tokenString;\n    }\n    var external = {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          scopes: [],\n          lastToken: null,\n          leavingExpr: false,\n          isDefinition: false,\n          nestedArrays: 0,\n          nestedComments: 0,\n          nestedGenerators: 0,\n          nestedParameters: 0,\n          firstParenPos: -1\n        };\n      },\n      token: function token(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n        if (current && style) {\n          state.lastToken = current;\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var delta = 0;\n        if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n          delta = -1;\n        }\n        return (state.scopes.length + delta) * config.indentUnit;\n      },\n      electricInput: /\\b(end|else|catch|finally)\\b/,\n      blockCommentStart: \"#=\",\n      blockCommentEnd: \"=#\",\n      lineComment: \"#\",\n      closeBrackets: \"()[]{}\\\"\\\"\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n});"],"sourceRoot":""}