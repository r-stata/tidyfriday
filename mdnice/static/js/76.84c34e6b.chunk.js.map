{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/oz/oz.js"],"names":["CodeMirror","defineMode","conf","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","tripleOperators","middle","end","atoms","commonKeywords","openingKeywords","middleKeywords","endKeywords","tokenBase","stream","state","eatSpace","match","matched","doInCurrentLine","currentIndent","tokenize","tokenFunProc","tokenClass","tokenMeth","quote","ch","next","escaped","test","peek","skipToEnd","eat","tokenComment","eatWhile","hasPassedFirstStage","maybeEnd","startState","token","sol","indent","textAfter","trueText","replace","indentUnit","fold","electricInput","allClosings","concat","buildElectricInputRegEx","lineComment","blockCommentStart","blockCommentEnd","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/76.84c34e6b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"oz\", function (conf) {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n    var singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\n    var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\n    var tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n    var middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\", \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\n    var end = [\"end\"];\n    var atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\n    var commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\", \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\n    var openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\", \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\n    var middleKeywords = wordRegexp(middle);\n    var endKeywords = wordRegexp(end);\n\n    // Tokenizers\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      // Brackets\n      if (stream.match(/[{}]/)) {\n        return \"bracket\";\n      }\n\n      // Special [] keyword\n      if (stream.match('[]')) {\n        return \"keyword\";\n      }\n\n      // Operators\n      if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n        return \"operator\";\n      }\n\n      // Atoms\n      if (stream.match(atoms)) {\n        return 'atom';\n      }\n\n      // Opening keywords\n      var matched = stream.match(openingKeywords);\n      if (matched) {\n        if (!state.doInCurrentLine) state.currentIndent++;else state.doInCurrentLine = false;\n\n        // Special matching for signatures\n        if (matched[0] == \"proc\" || matched[0] == \"fun\") state.tokenize = tokenFunProc;else if (matched[0] == \"class\") state.tokenize = tokenClass;else if (matched[0] == \"meth\") state.tokenize = tokenMeth;\n        return 'keyword';\n      }\n\n      // Middle and other keywords\n      if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n        return \"keyword\";\n      }\n\n      // End keywords\n      if (stream.match(endKeywords)) {\n        state.currentIndent--;\n        return 'keyword';\n      }\n\n      // Eat the next char for next comparisons\n      var ch = stream.next();\n\n      // Strings\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      // Numbers\n      if (/[~\\d]/.test(ch)) {\n        if (ch == \"~\") {\n          if (!/^[0-9]/.test(stream.peek())) return null;else if (stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/)) return \"number\";\n        }\n        if (ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/)) return \"number\";\n        return null;\n      }\n\n      // Comments\n      if (ch == \"%\") {\n        stream.skipToEnd();\n        return 'comment';\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n      }\n\n      // Single operators\n      if (singleOperators.test(ch)) {\n        return \"operator\";\n      }\n\n      // If nothing match, we skip the entire alphanumeric block\n      stream.eatWhile(/\\w/);\n      return \"variable\";\n    }\n    function tokenClass(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n      state.tokenize = tokenBase;\n      return \"variable-3\";\n    }\n    function tokenMeth(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n      stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n      state.tokenize = tokenBase;\n      return \"def\";\n    }\n    function tokenFunProc(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (!state.hasPassedFirstStage && stream.eat(\"{\")) {\n        state.hasPassedFirstStage = true;\n        return \"bracket\";\n      } else if (state.hasPassedFirstStage) {\n        stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n        state.hasPassedFirstStage = false;\n        state.tokenize = tokenBase;\n        return \"def\";\n      } else {\n        state.tokenize = tokenBase;\n        return null;\n      }\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function buildElectricInputRegEx() {\n      // Reindentation should occur on [] or on a match of any of\n      // the block closing keywords, at the end of a line.\n      var allClosings = middle.concat(end);\n      return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          currentIndent: 0,\n          doInCurrentLine: false,\n          hasPassedFirstStage: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) state.doInCurrentLine = 0;\n        return state.tokenize(stream, state);\n      },\n      indent: function indent(state, textAfter) {\n        var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n        if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/)) return conf.indentUnit * (state.currentIndent - 1);\n        if (state.currentIndent < 0) return 0;\n        return state.currentIndent * conf.indentUnit;\n      },\n      fold: \"indent\",\n      electricInput: buildElectricInputRegEx(),\n      lineComment: \"%\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-oz\", \"oz\");\n});"],"sourceRoot":""}