{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/ttcn-cfg/ttcn-cfg.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name","mod","__webpack_require__"],"mappings":"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","file":"static/js/109.a78b1153.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n      keywords = parserConfig.keywords || {},\n      fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n      externalCommands = parserConfig.externalCommands || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      if (ch == \"[\") {\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n      return \"variable\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" + \" TimeStampFormat LogEventTypes SourceInfoFormat\" + \" LogEntityName LogSourceInfo DiskFullAction\" + \" LogFileNumber LogFileSize MatchingHints Detailed\" + \" Compact SubCategories Stack Single None Seconds\" + \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" + \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" + \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" + \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" + \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" + \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" + \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" + \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" + \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" + \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" + \" DEBUG_ENCDEC DEBUG_TESTPORT\" + \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" + \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" + \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" + \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" + \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" + \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" + \" FUNCTION_RND FUNCTION_UNQUALIFIED\" + \" MATCHING_DONE MATCHING_MCSUCCESS\" + \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" + \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" + \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" + \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" + \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" + \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" + \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" + \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" + \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" + \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" + \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" + \" PORTEVENT_PCOUT PORTEVENT_PMIN\" + \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" + \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" + \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" + \" TESTCASE_FINISH TESTCASE_START\" + \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" + \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" + \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" + \" USER_UNQUALIFIED VERDICTOP_FINAL\" + \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" + \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" + \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});"],"sourceRoot":""}