{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/tiki/tiki.js"],"names":["CodeMirror","defineMode","config","inBlock","style","terminator","returnTokenizer","stream","state","eol","match","tokenize","inText","next","inLine","chain","parser","sol","ch","eat","eatSpace","eatWhile","inPlugin","pluginName","type","curState","setStyle","indentUnit","quote","peek","test","pass","i","arguments","length","cc","push","cont","apply","pushContext","startOfLine","noIndent","context","prev","indent","indented","popContext","element","attributes","err","endcloseplugin","name","attvalue","attvaluemaybe","startState","token","indentation","comb","pop","textAfter","electricChars","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/106.f23fc24a.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('tiki', function (config) {\n    function inBlock(style, terminator, returnTokenizer) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n          stream.next();\n        }\n        if (returnTokenizer) state.tokenize = returnTokenizer;\n        return style;\n      };\n    }\n    function inLine(style) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.next();\n        }\n        state.tokenize = inText;\n        return style;\n      };\n    }\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n      var sol = stream.sol();\n      var ch = stream.next();\n\n      //non start of line\n      switch (ch) {\n        //switch is generally much faster than if, so it is used here\n        case \"{\":\n          //plugin\n          stream.eat(\"/\");\n          stream.eatSpace();\n          stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?(}]/);\n          state.tokenize = inPlugin;\n          return \"tag\";\n        case \"_\":\n          //bold\n          if (stream.eat(\"_\")) return chain(inBlock(\"strong\", \"__\", inText));\n          break;\n        case \"'\":\n          //italics\n          if (stream.eat(\"'\")) return chain(inBlock(\"em\", \"''\", inText));\n          break;\n        case \"(\":\n          // Wiki Link\n          if (stream.eat(\"(\")) return chain(inBlock(\"variable-2\", \"))\", inText));\n          break;\n        case \"[\":\n          // Weblink\n          return chain(inBlock(\"variable-3\", \"]\", inText));\n          break;\n        case \"|\":\n          //table\n          if (stream.eat(\"|\")) return chain(inBlock(\"comment\", \"||\"));\n          break;\n        case \"-\":\n          if (stream.eat(\"=\")) {\n            //titleBar\n            return chain(inBlock(\"header string\", \"=-\", inText));\n          } else if (stream.eat(\"-\")) {\n            //deleted\n            return chain(inBlock(\"error tw-deleted\", \"--\", inText));\n          }\n          break;\n        case \"=\":\n          //underline\n          if (stream.match(\"==\")) return chain(inBlock(\"tw-underline\", \"===\", inText));\n          break;\n        case \":\":\n          if (stream.eat(\":\")) return chain(inBlock(\"comment\", \"::\"));\n          break;\n        case \"^\":\n          //box\n          return chain(inBlock(\"tw-box\", \"^\"));\n          break;\n        case \"~\":\n          //np\n          if (stream.match(\"np~\")) return chain(inBlock(\"meta\", \"~/np~\"));\n          break;\n      }\n\n      //start of line types\n      if (sol) {\n        switch (ch) {\n          case \"!\":\n            //header at start of line\n            if (stream.match('!!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!!')) {\n              return chain(inLine(\"header string\"));\n            } else if (stream.match('!!')) {\n              return chain(inLine(\"header string\"));\n            } else {\n              return chain(inLine(\"header string\"));\n            }\n            break;\n          case \"*\": //unordered list line item, or <li /> at start of line\n          case \"#\": //ordered list line item, or <li /> at start of line\n          case \"+\":\n            //ordered list line item, or <li /> at start of line\n            return chain(inLine(\"tw-listitem bracket\"));\n            break;\n        }\n      }\n\n      //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki\n      return null;\n    }\n    var indentUnit = config.indentUnit;\n\n    // Return variables for tokenizers\n    var pluginName, type;\n    function inPlugin(stream, state) {\n      var ch = stream.next();\n      var peek = stream.peek();\n      if (ch == \"}\") {\n        state.tokenize = inText;\n        //type = ch == \")\" ? \"endPlugin\" : \"selfclosePlugin\"; inPlugin\n        return \"tag\";\n      } else if (ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        if (peek == \">\") {\n          stream.next();\n          peek = stream.peek();\n        }\n\n        //here we detect values directly after equal character with no quotes\n        if (!/[\\'\\\"]/.test(peek)) {\n          state.tokenize = inAttributeNoQuote();\n        }\n        //end detect values\n\n        return \"operator\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        return state.tokenize(stream, state);\n      } else {\n        stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?]/);\n        return \"keyword\";\n      }\n    }\n    function inAttribute(quote) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n        return \"string\";\n      };\n    }\n    function inAttributeNoQuote() {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          var ch = stream.next();\n          var peek = stream.peek();\n          if (ch == \" \" || ch == \",\" || /[ )}]/.test(peek)) {\n            state.tokenize = inPlugin;\n            break;\n          }\n        }\n        return \"string\";\n      };\n    }\n    var curState, setStyle;\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);\n    }\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n    function pushContext(pluginName, startOfLine) {\n      var noIndent = curState.context && curState.context.noIndent;\n      curState.context = {\n        prev: curState.context,\n        pluginName: pluginName,\n        indent: curState.indented,\n        startOfLine: startOfLine,\n        noIndent: noIndent\n      };\n    }\n    function popContext() {\n      if (curState.context) curState.context = curState.context.prev;\n    }\n    function element(type) {\n      if (type == \"openPlugin\") {\n        curState.pluginName = pluginName;\n        return cont(attributes, endplugin(curState.startOfLine));\n      } else if (type == \"closePlugin\") {\n        var err = false;\n        if (curState.context) {\n          err = curState.context.pluginName != pluginName;\n          popContext();\n        } else {\n          err = true;\n        }\n        if (err) setStyle = \"error\";\n        return cont(endcloseplugin(err));\n      } else if (type == \"string\") {\n        if (!curState.context || curState.context.name != \"!cdata\") pushContext(\"!cdata\");\n        if (curState.tokenize == inText) popContext();\n        return cont();\n      } else return cont();\n    }\n    function endplugin(startOfLine) {\n      return function (type) {\n        if (type == \"selfclosePlugin\" || type == \"endPlugin\") return cont();\n        if (type == \"endPlugin\") {\n          pushContext(curState.pluginName, startOfLine);\n          return cont();\n        }\n        return cont();\n      };\n    }\n    function endcloseplugin(err) {\n      return function (type) {\n        if (err) setStyle = \"error\";\n        if (type == \"endPlugin\") return cont();\n        return pass();\n      };\n    }\n    function attributes(type) {\n      if (type == \"keyword\") {\n        setStyle = \"attribute\";\n        return cont(attributes);\n      }\n      if (type == \"equals\") return cont(attvalue, attributes);\n      return pass();\n    }\n    function attvalue(type) {\n      if (type == \"keyword\") {\n        setStyle = \"string\";\n        return cont();\n      }\n      if (type == \"string\") return cont(attvaluemaybe);\n      return pass();\n    }\n    function attvaluemaybe(type) {\n      if (type == \"string\") return cont(attvaluemaybe);else return pass();\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: inText,\n          cc: [],\n          indented: 0,\n          startOfLine: true,\n          pluginName: null,\n          context: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.startOfLine = true;\n          state.indented = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        setStyle = type = pluginName = null;\n        var style = state.tokenize(stream, state);\n        if ((style || type) && style != \"comment\") {\n          curState = state;\n          while (true) {\n            var comb = state.cc.pop() || element;\n            if (comb(type || style)) break;\n          }\n        }\n        state.startOfLine = false;\n        return setStyle || style;\n      },\n      indent: function indent(state, textAfter) {\n        var context = state.context;\n        if (context && context.noIndent) return 0;\n        if (context && /^{\\//.test(textAfter)) context = context.prev;\n        while (context && !context.startOfLine) context = context.prev;\n        if (context) return context.indent + indentUnit;else return 0;\n      },\n      electricChars: \"/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/tiki\", \"tiki\");\n});"],"sourceRoot":""}