{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/xml/xml.js","../node_modules/_codemirror@5.65.12@codemirror/mode/htmlmixed/htmlmixed.js","../node_modules/_codemirror@5.65.12@codemirror/mode/soy/soy.js"],"names":["CodeMirror","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","lower","toLowerCase","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","mod","__webpack_require__","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","getMode","tags","configTags","configScript","scriptTypes","matches","mode","html","htmlState","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","search","backUp","maybeBackup","copyState","local","line","innerMode","paramData","noEndTag","soyState","alias","delpackage","namespace","@attribute","@attribute?","@param","@param?","@inject","@inject?","@state","template","variableScope","extern","export","literal","msg","fallbackmsg","reduceIndent","select","plural","let","if","javaimpl","jsimpl","elseif","else","switch","case","default","foreach","ifempty","for","call","print","deltemplate","delcall","log","element","velog","const","indentingTags","Object","keys","filter","textMode","modes","attributes","uri","trusted_resource_uri","css","js","statementIndent","last","array","tokenUntil","untilRegExp","oldString","string","substr","pos","index","result","hideFirstChars","localStates","prepend","list","popcontext","scope","variables","previousContext","ref","loose","contains","kind","expression","lookupVariables","quoteKind","scopes","concat","map","pop","skipToEnd","paramRe","peekChar","peek","indexOf","undefined","substring","selfClosed","prevTag","indentingTag","tagError","isBalancedForExtern","top","lineComment","blockCommentContinue","useInnerComments","fold","registerHelper"],"mappings":"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","file":"static/js/17.199a22bb.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n    for (var prop in defaults) config[prop] = defaults[prop];\n    for (var prop in config_) config[prop] = config_[prop];\n\n    // Return variables for tokenizers\n    var type, setStyle;\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n      var ch = stream.next();\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n    inText.isInText = true;\n    function inTag(stream, state) {\n      var ch = stream.next();\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n        return \"string\";\n      };\n      closure.isInAttribute = true;\n      return closure;\n    }\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n          stream.next();\n        }\n        return style;\n      };\n    }\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n        return \"meta\";\n      };\n    }\n    function lower(tagName) {\n      return tagName && tagName.toLowerCase();\n    }\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName || \"\";\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n        parentTagName = state.context.tagName;\n        if (!config.contextGrabbers.hasOwnProperty(lower(parentTagName)) || !config.contextGrabbers[lower(parentTagName)].hasOwnProperty(lower(nextTagName))) {\n          return;\n        }\n        popContext(state);\n      }\n    }\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(lower(state.context.tagName))) popContext(state);\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n      popContext(state);\n      return baseState;\n    }\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n          tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(lower(tagName))) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n        return baseState;\n      }\n      setStyle = \"error\";\n      return attrState;\n    }\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context;\n        // Indent multi-line strings (e.g. css).\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n        // Indent the starts of attribute names.\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(lower(context.tagName))) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[lower(context.tagName)];\n            if (grabbers && grabbers.hasOwnProperty(lower(tagAfter[2]))) context = context.prev;else break;\n          }\n        }\n        while (context && context.prev && !context.startOfLine) context = context.prev;\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n        for (var cx = state.context; cx; cx = cx.prev) context.push(cx.tagName);\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n      close = cur.search(pat);\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n    return style;\n  }\n  var attrRegexpCache = {};\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\\\s*\" + tagName + \"\\\\s*>\", \"i\");\n  }\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n      for (var i = source.length - 1; i >= 0; i--) dest.unshift(source[i]);\n    }\n  }\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag,\n      allowMissingTagName: parserConfig.allowMissingTagName\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n      configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n        tag = /\\btag\\b/.test(style),\n        tagName;\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n          endTag = getTagRegexp(inTag[1], false);\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n      return style;\n    }\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var paramData = {\n    noEndTag: true,\n    soyState: \"param-def\"\n  };\n  var tags = {\n    \"alias\": {\n      noEndTag: true\n    },\n    \"delpackage\": {\n      noEndTag: true\n    },\n    \"namespace\": {\n      noEndTag: true,\n      soyState: \"namespace-def\"\n    },\n    \"@attribute\": paramData,\n    \"@attribute?\": paramData,\n    \"@param\": paramData,\n    \"@param?\": paramData,\n    \"@inject\": paramData,\n    \"@inject?\": paramData,\n    \"@state\": paramData,\n    \"template\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"extern\": {\n      soyState: \"param-def\"\n    },\n    \"export\": {\n      soyState: \"export\"\n    },\n    \"literal\": {},\n    \"msg\": {},\n    \"fallbackmsg\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"select\": {},\n    \"plural\": {},\n    \"let\": {\n      soyState: \"var-def\"\n    },\n    \"if\": {},\n    \"javaimpl\": {},\n    \"jsimpl\": {},\n    \"elseif\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"else\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"switch\": {},\n    \"case\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"default\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"foreach\": {\n      variableScope: true,\n      soyState: \"for-loop\"\n    },\n    \"ifempty\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"for\": {\n      variableScope: true,\n      soyState: \"for-loop\"\n    },\n    \"call\": {\n      soyState: \"templ-ref\"\n    },\n    \"param\": {\n      soyState: \"param-ref\"\n    },\n    \"print\": {\n      noEndTag: true\n    },\n    \"deltemplate\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"delcall\": {\n      soyState: \"templ-ref\"\n    },\n    \"log\": {},\n    \"element\": {\n      variableScope: true\n    },\n    \"velog\": {},\n    \"const\": {\n      soyState: \"const-def\"\n    }\n  };\n  var indentingTags = Object.keys(tags).filter(function (tag) {\n    return !tags[tag].noEndTag || tags[tag].reduceIndent;\n  });\n  CodeMirror.defineMode(\"soy\", function (config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {\n        name: \"text/html\",\n        multilineTagIndentFactor: 2,\n        multilineTagIndentPastTag: false,\n        allowMissingTagName: true\n      }),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {\n        name: \"text/javascript\",\n        statementIndent: 2 * config.indentUnit\n      })\n    };\n    function last(array) {\n      return array[array.length - 1];\n    }\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n        if (indent) return null;\n      }\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n      var result = stream.hideFirstChars(state.indent, function () {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n      return false;\n    }\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n    function popcontext(state) {\n      if (!state.context) return;\n      if (state.context.scope) {\n        state.variables = state.context.scope;\n      }\n      state.context = state.context.previousContext;\n    }\n\n    // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : loose ? \"variable\" : \"variable-2 error\";\n    }\n\n    // Data for an open soy tag.\n    function Context(previousContext, tag, scope) {\n      this.previousContext = previousContext;\n      this.tag = tag;\n      this.kind = null;\n      this.scope = scope;\n    }\n    function expression(stream, state) {\n      var match;\n      if (stream.match(/[[]/)) {\n        state.soyState.push(\"list-literal\");\n        state.context = new Context(state.context, \"list-literal\", state.variables);\n        state.lookupVariables = false;\n        return null;\n      } else if (stream.match(/\\bmap(?=\\()/)) {\n        state.soyState.push(\"map-literal\");\n        return \"keyword\";\n      } else if (stream.match(/\\brecord(?=\\()/)) {\n        state.soyState.push(\"record-literal\");\n        return \"keyword\";\n      } else if (stream.match(/([\\w]+)(?=\\()/)) {\n        return \"variable callee\";\n      } else if (match = stream.match(/^[\"']/)) {\n        state.soyState.push(\"string\");\n        state.quoteKind = match[0];\n        return \"string\";\n      } else if (stream.match(/^[(]/)) {\n        state.soyState.push(\"open-parentheses\");\n        return null;\n      } else if (stream.match(/(null|true|false)(?!\\w)/) || stream.match(/0x([0-9a-fA-F]{2,})/) || stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {\n        return \"atom\";\n      } else if (stream.match(/(\\||[+\\-*\\/%]|[=!]=|\\?:|[<>]=?)/)) {\n        // Tokenize filter, binary, null propagator, and equality operators.\n        return \"operator\";\n      } else if (match = stream.match(/^\\$([\\w]+)/)) {\n        return ref(state.variables, match[1], !state.lookupVariables);\n      } else if (match = stream.match(/^\\w+/)) {\n        return /^(?:as|and|or|not|in|if)$/.test(match[0]) ? \"keyword\" : null;\n      }\n      stream.next();\n      return null;\n    }\n    return {\n      startState: function startState() {\n        return {\n          soyState: [],\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          context: null,\n          lookupVariables: true,\n          // Is unknown variables considered an error\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          tag: state.tag,\n          // Last seen Soy tag.\n          soyState: state.soyState.concat([]),\n          variables: state.variables,\n          context: state.context,\n          indent: state.indent,\n          // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          lookupVariables: state.lookupVariables,\n          localStates: state.localStates.map(function (localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n      token: function token(stream, state) {\n        var match;\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n            if (!state.context || !state.context.scope) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n              for (var match; match = paramRe.exec(current);) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n            return \"comment\";\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n            return \"string\";\n        }\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop();\n              // If the first character is '.', it can only be a local template.\n              if (match[0][0] == '.') {\n                return \"variable-2\";\n              }\n              // Otherwise\n              return \"variable\";\n            }\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.soyState.pop();\n              return ref(state.variables, match[1], !state.lookupVariables);\n            }\n            stream.next();\n            return null;\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n            stream.next();\n            return null;\n          case \"param-def\":\n            if (match = stream.match(/^\\*/)) {\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"type\";\n            }\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n            stream.next();\n            return null;\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n            stream.next();\n            return null;\n          case \"open-parentheses\":\n            if (stream.match(/[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            return expression(stream, state);\n          case \"param-type\":\n            var peekChar = stream.peek();\n            if (\"}]=>,\".indexOf(peekChar) != -1) {\n              state.soyState.pop();\n              return null;\n            } else if (peekChar == \"[\") {\n              state.soyState.push('param-type-record');\n              return null;\n            } else if (peekChar == \"(\") {\n              state.soyState.push('param-type-template');\n              return null;\n            } else if (peekChar == \"<\") {\n              state.soyState.push('param-type-parameter');\n              return null;\n            } else if (match = stream.match(/^([\\w]+|[?])/)) {\n              return \"type\";\n            }\n            stream.next();\n            return null;\n          case \"param-type-record\":\n            var peekChar = stream.peek();\n            if (peekChar == \"]\") {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"property\";\n            }\n            stream.next();\n            return null;\n          case \"param-type-parameter\":\n            if (stream.match(/^[>]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/^[<,]/)) {\n              state.soyState.push('param-type');\n              return null;\n            }\n            stream.next();\n            return null;\n          case \"param-type-template\":\n            if (stream.match(/[>]/)) {\n              state.soyState.pop();\n              state.soyState.push('param-type');\n              return null;\n            }\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"def\";\n            }\n            stream.next();\n            return null;\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n          case \"for-loop\":\n            if (stream.match(/\\bin\\b/)) {\n              state.soyState.pop();\n              return \"keyword\";\n            }\n            if (stream.peek() == \"$\") {\n              state.soyState.push('var-def');\n              return null;\n            }\n            stream.next();\n            return null;\n          case \"record-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"record-key\");\n              return null;\n            }\n            stream.next();\n            return null;\n          case \"map-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"map-value\");\n              return null;\n            }\n            stream.next();\n            return null;\n          case \"list-literal\":\n            if (stream.match(']')) {\n              state.soyState.pop();\n              state.lookupVariables = true;\n              popcontext(state);\n              return null;\n            }\n            if (stream.match(/\\bfor\\b/)) {\n              state.lookupVariables = true;\n              state.soyState.push('for-loop');\n              return \"keyword\";\n            }\n            return expression(stream, state);\n          case \"record-key\":\n            if (stream.match(/[\\w]+/)) {\n              return \"property\";\n            }\n            if (stream.match(/^[:]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            stream.next();\n            return null;\n          case \"map-value\":\n            if (stream.peek() == \")\" || stream.peek() == \",\" || stream.match(/^[:)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n            return expression(stream, state);\n          case \"import\":\n            if (stream.eat(\";\")) {\n              state.soyState.pop();\n              state.indent -= 2 * config.indentUnit;\n              return null;\n            }\n            if (stream.match(/\\w+(?=\\s+as\\b)/)) {\n              return \"variable\";\n            }\n            if (match = stream.match(/\\w+/)) {\n              return /\\b(from|as)\\b/.test(match[0]) ? \"keyword\" : \"def\";\n            }\n            if (match = stream.match(/^[\"']/)) {\n              state.soyState.push(\"string\");\n              state.quoteKind = match[0];\n              return \"string\";\n            }\n            stream.next();\n            return null;\n          case \"tag\":\n            var endTag;\n            var tagName;\n            if (state.tag === undefined) {\n              endTag = true;\n              tagName = '';\n            } else {\n              endTag = state.tag[0] == \"/\";\n              tagName = endTag ? state.tag.substring(1) : state.tag;\n            }\n            var tag = tags[tagName];\n            if (stream.match(/^\\/?}/)) {\n              var selfClosed = stream.current() == \"/}\";\n              if (selfClosed && !endTag) {\n                popcontext(state);\n              }\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                state.indent -= config.indentUnit * (selfClosed || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (state.context && state.context.tag == tagName && stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.context.kind = kind;\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\", \"\");\n                }\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n              return \"attribute\";\n            }\n            return expression(stream, state);\n          case \"template-call-expression\":\n            if (stream.match(/^([\\w-?]+)(?==)/)) {\n              return \"attribute\";\n            } else if (stream.eat('>')) {\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.eat('/>')) {\n              state.soyState.pop();\n              return \"keyword\";\n            }\n            return expression(stream, state);\n          case \"literal\":\n            if (stream.match('{/literal}', false)) {\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n          case \"export\":\n            if (match = stream.match(/\\w+/)) {\n              state.soyState.pop();\n              if (match == \"const\") {\n                state.soyState.push(\"const-def\");\n                return \"keyword\";\n              } else if (match == \"extern\") {\n                state.soyState.push(\"param-def\");\n                return \"keyword\";\n              }\n            } else {\n              stream.next();\n            }\n            return null;\n          case \"const-def\":\n            if (stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n        }\n        if (stream.match('{literal}')) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          state.context = new Context(state.context, \"literal\", state.variables);\n          return \"keyword\";\n\n          // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          var prevTag = state.tag;\n          state.tag = match[1];\n          var endTag = state.tag[0] == \"/\";\n          var indentingTag = !!tags[state.tag];\n          var tagName = endTag ? state.tag.substring(1) : state.tag;\n          var tag = tags[tagName];\n          if (state.tag != \"/switch\") state.indent += ((endTag || tag && tag.reduceIndent) && prevTag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.soyState.push(\"tag\");\n          var tagError = false;\n          if (tag) {\n            if (!endTag) {\n              if (tag.soyState) state.soyState.push(tag.soyState);\n            }\n            // If a new tag, open a new context.\n            if (!tag.noEndTag && (indentingTag || !endTag)) {\n              state.context = new Context(state.context, state.tag, tag.variableScope ? state.variables : null);\n              // Otherwise close the current context.\n            } else if (endTag) {\n              var isBalancedForExtern = tagName == 'extern' && state.context && state.context.tag == 'export';\n              if (!state.context || state.context.tag != tagName && !isBalancedForExtern) {\n                tagError = true;\n              } else if (state.context) {\n                if (state.context.kind) {\n                  state.localStates.pop();\n                  var localState = last(state.localStates);\n                  if (localState.mode.indent) {\n                    state.indent -= localState.mode.indent(localState.state, \"\", \"\");\n                  }\n                }\n                popcontext(state);\n              }\n            }\n          } else if (endTag) {\n            // Assume all tags with a closing tag are defined in the config.\n            tagError = true;\n          }\n          return (tagError ? \"error \" : \"\") + \"keyword\";\n\n          // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        } else if (!state.context && stream.sol() && stream.match(/import\\b/)) {\n          state.soyState.push(\"import\");\n          state.indent += 2 * config.indentUnit;\n          return \"keyword\";\n        } else if (match = stream.match('<{')) {\n          state.soyState.push(\"template-call-expression\");\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        } else if (match = stream.match('</>')) {\n          state.indent -= 1 * config.indentUnit;\n          return \"keyword\";\n        }\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n      indent: function indent(state, textAfter, line) {\n        var indent = state.indent,\n          top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n        var localState = last(state.localStates);\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter, line);\n        }\n        return indent;\n      },\n      innerMode: function innerMode(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;else return last(state.localStates);\n      },\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", Object.keys(tags).concat([\"css\", \"debugger\"]));\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});"],"sourceRoot":""}