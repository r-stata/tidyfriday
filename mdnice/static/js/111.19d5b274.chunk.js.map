{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/turtle/turtle.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","wordRegexp","words","RegExp","join","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","word","current","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/111.19d5b274.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"turtle\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n    var ops = wordRegexp([]);\n    var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n    var operatorChars = /[*+\\-<>=&|]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n      if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else if (ch == \":\") {\n        return \"operator\";\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.peek() == \":\") {\n          return \"variable-3\";\n        } else {\n          var word = stream.current();\n          if (keywords.test(word)) {\n            return \"meta\";\n          }\n          if (ch >= \"A\" && ch <= \"Z\") {\n            return \"comment\";\n          } else {\n            return \"keyword\";\n          }\n        }\n        var word = stream.current();\n        if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n      }\n    }\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n      };\n    }\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") popContext(state);\n          if (state.context && curPunc == state.context.type) popContext(state);\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n});"],"sourceRoot":""}