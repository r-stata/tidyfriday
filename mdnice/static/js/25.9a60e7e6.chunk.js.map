{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/haskell/haskell.js","../node_modules/_codemirror@5.65.12@codemirror/mode/haskell-literate/haskell-literate.js"],"names":["CodeMirror","defineMode","_config","modeConfig","switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","eat","t","ncomment","type","nest","currNest","eol","stringLiteral","match","skipToEnd","stringGap","wellKnownWords","wkw","setType","i","arguments","length","override","overrideKeywords","word","hasOwnProperty","startState","copyState","s","token","stream","state","w","current","blockCommentStart","blockCommentEnd","lineComment","defineMIME","mod","__webpack_require__","config","parserConfig","baseMode","getMode","base","inCode","baseState","sol","innerMode","mode"],"mappings":"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","file":"static/js/25.9a60e7e6.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell\", function (_config, modeConfig) {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n\n    // These should all be Unicode extended, as per the Haskell 2010 report\n    var smallRE = /[a-z_]/;\n    var largeRE = /[A-Z]/;\n    var digitRE = /\\d/;\n    var hexitRE = /[0-9A-Fa-f]/;\n    var octitRE = /[0-7]/;\n    var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n    var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n    var specialRE = /[(),;[\\]`{}]/;\n    var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n    function normal(source, setState) {\n      if (source.eatWhile(whiteCharRE)) {\n        return null;\n      }\n      var ch = source.next();\n      if (specialRE.test(ch)) {\n        if (ch == '{' && source.eat('-')) {\n          var t = \"comment\";\n          if (source.eat('#')) {\n            t = \"meta\";\n          }\n          return switchState(source, setState, ncomment(t, 1));\n        }\n        return null;\n      }\n      if (ch == '\\'') {\n        if (source.eat('\\\\')) {\n          source.next(); // should handle other escapes here\n        } else {\n          source.next();\n        }\n        if (source.eat('\\'')) {\n          return \"string\";\n        }\n        return \"string error\";\n      }\n      if (ch == '\"') {\n        return switchState(source, setState, stringLiteral);\n      }\n      if (largeRE.test(ch)) {\n        source.eatWhile(idRE);\n        if (source.eat('.')) {\n          return \"qualifier\";\n        }\n        return \"variable-2\";\n      }\n      if (smallRE.test(ch)) {\n        source.eatWhile(idRE);\n        return \"variable\";\n      }\n      if (digitRE.test(ch)) {\n        if (ch == '0') {\n          if (source.eat(/[xX]/)) {\n            source.eatWhile(hexitRE); // should require at least 1\n            return \"integer\";\n          }\n          if (source.eat(/[oO]/)) {\n            source.eatWhile(octitRE); // should require at least 1\n            return \"number\";\n          }\n        }\n        source.eatWhile(digitRE);\n        var t = \"number\";\n        if (source.match(/^\\.\\d+/)) {\n          t = \"number\";\n        }\n        if (source.eat(/[eE]/)) {\n          t = \"number\";\n          source.eat(/[-+]/);\n          source.eatWhile(digitRE); // should require at least 1\n        }\n\n        return t;\n      }\n      if (ch == \".\" && source.eat(\".\")) return \"keyword\";\n      if (symbolRE.test(ch)) {\n        if (ch == '-' && source.eat(/-/)) {\n          source.eatWhile(/-/);\n          if (!source.eat(symbolRE)) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n        }\n        var t = \"variable\";\n        if (ch == ':') {\n          t = \"variable-2\";\n        }\n        source.eatWhile(symbolRE);\n        return t;\n      }\n      return \"error\";\n    }\n    function ncomment(type, nest) {\n      if (nest == 0) {\n        return normal;\n      }\n      return function (source, setState) {\n        var currNest = nest;\n        while (!source.eol()) {\n          var ch = source.next();\n          if (ch == '{' && source.eat('-')) {\n            ++currNest;\n          } else if (ch == '-' && source.eat('}')) {\n            --currNest;\n            if (currNest == 0) {\n              setState(normal);\n              return type;\n            }\n          }\n        }\n        setState(ncomment(type, currNest));\n        return type;\n      };\n    }\n    function stringLiteral(source, setState) {\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '\"') {\n          setState(normal);\n          return \"string\";\n        }\n        if (ch == '\\\\') {\n          if (source.eol() || source.eat(whiteCharRE)) {\n            setState(stringGap);\n            return \"string\";\n          }\n          if (source.eat('&')) {} else {\n            source.next(); // should handle other escapes here\n          }\n        }\n      }\n\n      setState(normal);\n      return \"string error\";\n    }\n    function stringGap(source, setState) {\n      if (source.eat('\\\\')) {\n        return switchState(source, setState, stringLiteral);\n      }\n      source.next();\n      setState(normal);\n      return \"error\";\n    }\n    var wellKnownWords = function () {\n      var wkw = {};\n      function setType(t) {\n        return function () {\n          for (var i = 0; i < arguments.length; i++) wkw[arguments[i]] = t;\n        };\n      }\n      setType(\"keyword\")(\"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\", \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n      setType(\"keyword\")(\"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n      setType(\"builtin\")(\"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\", \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"*>\", \"**\");\n      setType(\"builtin\")(\"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\", \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\", \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\", \"String\", \"True\");\n      setType(\"builtin\")(\"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\", \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\", \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\", \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\", \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\", \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\", \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\", \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\", \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\", \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\", \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\", \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\", \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\", \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\", \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\", \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\", \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\", \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\", \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\", \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\", \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\", \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\", \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\", \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\", \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\", \"zip3\", \"zipWith\", \"zipWith3\");\n      var override = modeConfig.overrideKeywords;\n      if (override) for (var word in override) if (override.hasOwnProperty(word)) wkw[word] = override[word];\n      return wkw;\n    }();\n    return {\n      startState: function startState() {\n        return {\n          f: normal\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        var t = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var w = stream.current();\n        return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n      },\n      blockCommentStart: \"{-\",\n      blockCommentEnd: \"-}\",\n      lineComment: \"--\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"haskell\");\n    return {\n      startState: function startState() {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\")) return \"meta\";\n        }\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState);\n        } else {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      },\n      innerMode: function innerMode(state) {\n        return state.inCode ? {\n          state: state.baseState,\n          mode: baseMode\n        } : null;\n      }\n    };\n  }, \"haskell\");\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\");\n});"],"sourceRoot":""}