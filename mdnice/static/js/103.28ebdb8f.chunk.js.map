{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/tcl/tcl.js"],"names":["CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","quote","ch","next","inParams","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","escaped","end","maybeEnd","startState","token","eatSpace","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"gFAaC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBACA,SAAAC,EAAAC,GAGA,IAFA,IAAAC,EAAA,GACAC,EAAAF,EAAAG,MAAA,KACAC,EAAA,EAAqBA,EAAAF,EAAAG,SAAkBD,EAAAH,EAAAC,EAAAE,KAAA,EACvC,OAAAH,EAEA,IAAAK,EAAAP,EAAA,+zBACAQ,EAAAR,EAAA,kEACAS,EAAA,qBACA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,OADAD,EAAAE,SAAAD,EACAA,EAAAF,EAAAC,GAEA,SAAAG,EAAAJ,EAAAC,GACA,IAAAI,EAAAJ,EAAAI,aACAJ,EAAAI,cAAA,EACA,IAoCAC,EApCAC,EAAAP,EAAAQ,OACA,QAAAD,GAAA,KAAAA,IAAAN,EAAAQ,SAEO,uBAAwBC,KAAAH,GAE/B,MADA,KAAAA,GAAAF,EAAAJ,EAAAQ,UAAA,EAA6D,KAAAF,IAAAN,EAAAQ,UAAA,GAC7D,KACO,QAAAC,KAAAH,GAEP,OADAP,EAAAW,SAAA,UACA,SACO,QAAAJ,EACP,OAAAP,EAAAY,IAAA,KAAAb,EAAAC,EAAAC,EAAAY,GACA,KAAAN,GAAAP,EAAAc,MAAA,YAAAf,EAAAC,EAAAC,EAAAc,IACAf,EAAAgB,YACA,WACO,QAAAT,EAEP,OADAP,EAAAiB,OAAA,KACA,UACO,QAAAV,EAIP,OAHAP,EAAAW,SAAA,qBACAX,EAAAW,SAAA,KACAV,EAAAI,cAAA,EACA,UACO,GAAAP,EAAAY,KAAAH,GAEP,OADAP,EAAAW,SAAAb,GACA,UAEAE,EAAAW,SAAA,wBACA,IAAAO,EAAAlB,EAAAmB,UAAAC,cACA,OAAAxB,KAAAyB,qBAAAH,GAAA,UACArB,KAAAwB,qBAAAH,IACAjB,EAAAI,cAAA,EACA,WAEA,KA/BA,OAAAN,EAAAC,EAAAC,GAkCAK,EAlCAC,EAmCA,SAAAP,EAAAC,GAIA,IAHA,IACAO,EADAc,GAAA,EAEAC,GAAA,EACA,OAAAf,EAAAR,EAAAQ,SAAA,CACA,GAAAA,GAAAF,IAAAgB,EAAA,CACAC,GAAA,EACA,MAEAD,MAAA,MAAAd,EAGA,OADAe,IAAAtB,EAAAE,SAAAC,GACA,YAGA,SAAAS,EAAAb,EAAAC,GAGA,IAFA,IACAM,EADAiB,GAAA,EAEAjB,EAAAP,EAAAQ,QAAA,CACA,QAAAD,GAAAiB,EAAA,CACAvB,EAAAE,SAAAC,EACA,MAEAoB,EAAA,KAAAjB,EAEA,gBAEA,SAAAQ,EAAAf,EAAAC,GAGA,IAFA,IACAM,EADAiB,EAAA,EAEAjB,EAAAP,EAAAQ,QAAA,CACA,QAAAD,GAAA,GAAAiB,EAAA,CACAvB,EAAAE,SAAAC,EACA,MAEA,KAAAG,EAAAiB,IAAkC,KAAAjB,IAAAiB,EAAA,GAElC,aAEA,OACAC,WAAA,WACA,OACAtB,SAAAC,EACAC,cAAA,EACAI,UAAA,IAGAiB,MAAA,SAAA1B,EAAAC,GACA,OAAAD,EAAA2B,WAAA,KACA1B,EAAAE,SAAAH,EAAAC,IAEA2B,YAAA,OAGAzC,EAAA0C,WAAA,oBApHAC,CAAQC,EAAQ","file":"static/js/103.28ebdb8f.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tcl\", function () {\n    function parseWords(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" + \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" + \"binary break catch cd close concat continue dde eof encoding error \" + \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" + \"filename flush for foreach format gets glob global history http if \" + \"incr info interp join lappend lindex linsert list llength load lrange \" + \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" + \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" + \"registry regsub rename resource return scan seek set socket source split \" + \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" + \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" + \"tclvars tell time trace unknown unset update uplevel upvar variable \" + \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\")) return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n});"],"sourceRoot":""}