{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/mllike/mllike.js"],"names":["CodeMirror","defineMode","_config","parserConfig","words","as","do","else","end","exception","fun","functor","if","in","include","let","of","open","rec","struct","then","type","val","while","with","extraWords","prop","hasOwnProperty","hintWords","k","push","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","longString","tokenLongString","match","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","escaped","prev","registerHelper","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","and","assert","begin","class","constraint","done","downto","external","function","initializer","lazy","method","module","mutable","new","nonrec","object","private","sig","to","try","value","virtual","when","raise","failwith","true","false","asr","land","lor","lsl","lsr","lxor","mod","or","raise_notrace","trace","exit","print_string","print_endline","int","float","bool","char","string","unit","List","abstract","base","default","delegate","do!","downcast","elif","extern","finally","for","global","inherit","inline","interface","internal","let!","member","namespace","null","override","public","return!","return","select","static","upcast","use!","use","void","yield!","yield","atomic","break","checked","component","const","constructor","continue","eager","event","fixed","mixin","parallel","process","protected","pure","sealed","tailcall","trait","volatile","Seq","Map","Set","Option","not","abstype","andalso","case","datatype","fn","handle","infix","infixr","local","nonfix","op","orelse","withtype","eqtype","sharing","signature","structure","where","real","__webpack_require__"],"mappings":"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","file":"static/js/69.4abc0998.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mllike', function (_config, parserConfig) {\n    var words = {\n      'as': 'keyword',\n      'do': 'keyword',\n      'else': 'keyword',\n      'end': 'keyword',\n      'exception': 'keyword',\n      'fun': 'keyword',\n      'functor': 'keyword',\n      'if': 'keyword',\n      'in': 'keyword',\n      'include': 'keyword',\n      'let': 'keyword',\n      'of': 'keyword',\n      'open': 'keyword',\n      'rec': 'keyword',\n      'struct': 'keyword',\n      'then': 'keyword',\n      'type': 'keyword',\n      'val': 'keyword',\n      'while': 'keyword',\n      'with': 'keyword'\n    };\n    var extraWords = parserConfig.extraWords || {};\n    for (var prop in extraWords) {\n      if (extraWords.hasOwnProperty(prop)) {\n        words[prop] = parserConfig.extraWords[prop];\n      }\n    }\n    var hintWords = [];\n    for (var k in words) {\n      hintWords.push(k);\n    }\n    CodeMirror.registerHelper(\"hintWords\", \"mllike\", hintWords);\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      }\n      if (ch === '{') {\n        if (stream.eat('|')) {\n          state.longString = true;\n          state.tokenize = tokenLongString;\n          return state.tokenize(stream, state);\n        }\n      }\n      if (ch === '(') {\n        if (stream.match(/^\\*(?!\\))/)) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      }\n      if (ch === '~' || ch === '?') {\n        stream.eatWhile(/\\w/);\n        return 'variable-2';\n      }\n      if (ch === '`') {\n        stream.eatWhile(/\\w/);\n        return 'quote';\n      }\n      if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n        stream.skipToEnd();\n        return 'comment';\n      }\n      if (/\\d/.test(ch)) {\n        if (ch === '0' && stream.eat(/[bB]/)) {\n          stream.eatWhile(/[01]/);\n        }\n        if (ch === '0' && stream.eat(/[xX]/)) {\n          stream.eatWhile(/[0-9a-fA-F]/);\n        }\n        if (ch === '0' && stream.eat(/[oO]/)) {\n          stream.eatWhile(/[0-7]/);\n        } else {\n          stream.eatWhile(/[\\d_]/);\n          if (stream.eat('.')) {\n            stream.eatWhile(/[\\d]/);\n          }\n          if (stream.eat(/[eE]/)) {\n            stream.eatWhile(/[\\d\\-+]/);\n          }\n        }\n        return 'number';\n      }\n      if (/[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n        return 'operator';\n      }\n      if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        var cur = stream.current();\n        return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n      }\n      return null;\n    }\n    function tokenString(stream, state) {\n      var next,\n        end = false,\n        escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return 'string';\n    }\n    ;\n    function tokenComment(stream, state) {\n      var prev, next;\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n      return 'comment';\n    }\n    function tokenLongString(stream, state) {\n      var prev, next;\n      while (state.longString && (next = stream.next()) != null) {\n        if (prev === '|' && next === '}') state.longString = false;\n        prev = next;\n      }\n      if (!state.longString) {\n        state.tokenize = tokenBase;\n      }\n      return 'string';\n    }\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0,\n          longString: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: parserConfig.slashComments ? \"//\" : null\n    };\n  });\n  CodeMirror.defineMIME('text/x-ocaml', {\n    name: 'mllike',\n    extraWords: {\n      'and': 'keyword',\n      'assert': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'constraint': 'keyword',\n      'done': 'keyword',\n      'downto': 'keyword',\n      'external': 'keyword',\n      'function': 'keyword',\n      'initializer': 'keyword',\n      'lazy': 'keyword',\n      'match': 'keyword',\n      'method': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'new': 'keyword',\n      'nonrec': 'keyword',\n      'object': 'keyword',\n      'private': 'keyword',\n      'sig': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'value': 'keyword',\n      'virtual': 'keyword',\n      'when': 'keyword',\n      // builtins\n      'raise': 'builtin',\n      'failwith': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      // Pervasives builtins\n      'asr': 'builtin',\n      'land': 'builtin',\n      'lor': 'builtin',\n      'lsl': 'builtin',\n      'lsr': 'builtin',\n      'lxor': 'builtin',\n      'mod': 'builtin',\n      'or': 'builtin',\n      // More Pervasives\n      'raise_notrace': 'builtin',\n      'trace': 'builtin',\n      'exit': 'builtin',\n      'print_string': 'builtin',\n      'print_endline': 'builtin',\n      'int': 'type',\n      'float': 'type',\n      'bool': 'type',\n      'char': 'type',\n      'string': 'type',\n      'unit': 'type',\n      // Modules\n      'List': 'builtin'\n    }\n  });\n  CodeMirror.defineMIME('text/x-fsharp', {\n    name: 'mllike',\n    extraWords: {\n      'abstract': 'keyword',\n      'assert': 'keyword',\n      'base': 'keyword',\n      'begin': 'keyword',\n      'class': 'keyword',\n      'default': 'keyword',\n      'delegate': 'keyword',\n      'do!': 'keyword',\n      'done': 'keyword',\n      'downcast': 'keyword',\n      'downto': 'keyword',\n      'elif': 'keyword',\n      'extern': 'keyword',\n      'finally': 'keyword',\n      'for': 'keyword',\n      'function': 'keyword',\n      'global': 'keyword',\n      'inherit': 'keyword',\n      'inline': 'keyword',\n      'interface': 'keyword',\n      'internal': 'keyword',\n      'lazy': 'keyword',\n      'let!': 'keyword',\n      'match': 'keyword',\n      'member': 'keyword',\n      'module': 'keyword',\n      'mutable': 'keyword',\n      'namespace': 'keyword',\n      'new': 'keyword',\n      'null': 'keyword',\n      'override': 'keyword',\n      'private': 'keyword',\n      'public': 'keyword',\n      'return!': 'keyword',\n      'return': 'keyword',\n      'select': 'keyword',\n      'static': 'keyword',\n      'to': 'keyword',\n      'try': 'keyword',\n      'upcast': 'keyword',\n      'use!': 'keyword',\n      'use': 'keyword',\n      'void': 'keyword',\n      'when': 'keyword',\n      'yield!': 'keyword',\n      'yield': 'keyword',\n      // Reserved words\n      'atomic': 'keyword',\n      'break': 'keyword',\n      'checked': 'keyword',\n      'component': 'keyword',\n      'const': 'keyword',\n      'constraint': 'keyword',\n      'constructor': 'keyword',\n      'continue': 'keyword',\n      'eager': 'keyword',\n      'event': 'keyword',\n      'external': 'keyword',\n      'fixed': 'keyword',\n      'method': 'keyword',\n      'mixin': 'keyword',\n      'object': 'keyword',\n      'parallel': 'keyword',\n      'process': 'keyword',\n      'protected': 'keyword',\n      'pure': 'keyword',\n      'sealed': 'keyword',\n      'tailcall': 'keyword',\n      'trait': 'keyword',\n      'virtual': 'keyword',\n      'volatile': 'keyword',\n      // builtins\n      'List': 'builtin',\n      'Seq': 'builtin',\n      'Map': 'builtin',\n      'Set': 'builtin',\n      'Option': 'builtin',\n      'int': 'builtin',\n      'string': 'builtin',\n      'not': 'builtin',\n      'true': 'builtin',\n      'false': 'builtin',\n      'raise': 'builtin',\n      'failwith': 'builtin'\n    },\n    slashComments: true\n  });\n  CodeMirror.defineMIME('text/x-sml', {\n    name: 'mllike',\n    extraWords: {\n      'abstype': 'keyword',\n      'and': 'keyword',\n      'andalso': 'keyword',\n      'case': 'keyword',\n      'datatype': 'keyword',\n      'fn': 'keyword',\n      'handle': 'keyword',\n      'infix': 'keyword',\n      'infixr': 'keyword',\n      'local': 'keyword',\n      'nonfix': 'keyword',\n      'op': 'keyword',\n      'orelse': 'keyword',\n      'raise': 'keyword',\n      'withtype': 'keyword',\n      'eqtype': 'keyword',\n      'sharing': 'keyword',\n      'sig': 'keyword',\n      'signature': 'keyword',\n      'structure': 'keyword',\n      'where': 'keyword',\n      'true': 'keyword',\n      'false': 'keyword',\n      // types\n      'int': 'builtin',\n      'real': 'builtin',\n      'string': 'builtin',\n      'char': 'builtin',\n      'bool': 'builtin'\n    },\n    slashComments: true\n  });\n});"],"sourceRoot":""}