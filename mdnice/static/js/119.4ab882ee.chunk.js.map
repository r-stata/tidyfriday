{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/xquery/xquery.js"],"names":["CodeMirror","defineMode","keywords","kw","type","style","operator","atom","qualifier","kwObj",",","basic","i","l","length","types","operators","axis_specifiers","chain","stream","state","f","tokenize","tokenBase","ch","next","mightBeFunction","isEQName","current","match","isEQNameAhead","tokenXMLComment","tokenCDATA","tokenPreProcessing","isclose","eat","eatSpace","c","tagName","name","popStateStack","pushStateStack","tokenAttribute","tokenTag","isInXmlBlock","test","tokenComment","tokenVariable","known","propertyIsEnumerable","eatWhile","foundColon","word","isIn","isInXmlConstructor","tokenString","maybeEnd","maybeNested","nestedCount","quote","isInString","isInXmlAttributeBlock","isVariableChar","stack","newState","push","pop","reinstateTokenize","startState","cc","token","blockCommentStart","blockCommentEnd","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/119.4ab882ee.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"xquery\", function () {\n    // The keywords object is set to the result of this self executing\n    // function. Each keyword is a property of the keywords object whose\n    // value is {type: atype, style: astyle}\n    var keywords = function () {\n      // convenience functions used to build keywords object\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n      var operator = kw(\"operator\"),\n        atom = {\n          type: \"atom\",\n          style: \"atom\"\n        },\n        punctuation = {\n          type: \"punctuation\",\n          style: null\n        },\n        qualifier = {\n          type: \"axis_specifier\",\n          style: \"qualifier\"\n        };\n\n      // kwObj is what is return from this function at the end\n      var kwObj = {\n        ',': punctuation\n      };\n\n      // a list of 'basic' keywords. For each add a property to kwObj with the value of\n      // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n      var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as', 'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast', 'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content', 'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete', 'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance', 'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end', 'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling', 'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group', 'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into', 'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map', 'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit', 'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering', 'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve', 'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return', 'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score', 'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable', 'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times', 'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered', 'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version', 'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n      for (var i = 0, l = basic.length; i < l; i++) {\n        kwObj[basic[i]] = kw(basic[i]);\n      }\n      ;\n\n      // a list of types. For each add a property to kwObj with the value of\n      // {type: \"atom\", style: \"atom\"}\n      var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI', 'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp', 'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY', 'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary', 'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language', 'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS', 'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION', 'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string', 'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong', 'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n      for (var i = 0, l = types.length; i < l; i++) {\n        kwObj[types[i]] = atom;\n      }\n      ;\n\n      // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n      var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n      for (var i = 0, l = operators.length; i < l; i++) {\n        kwObj[operators[i]] = operator;\n      }\n      ;\n\n      // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n      var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\", \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n      for (var i = 0, l = axis_specifiers.length; i < l; i++) {\n        kwObj[axis_specifiers[i]] = qualifier;\n      }\n      ;\n      return kwObj;\n    }();\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    // the primary mode tokenizer\n    function tokenBase(stream, state) {\n      var ch = stream.next(),\n        mightBeFunction = false,\n        isEQName = isEQNameAhead(stream);\n\n      // an XML tag (if not in some sub, chained tokenizer)\n      if (ch == \"<\") {\n        if (stream.match(\"!--\", true)) return chain(stream, state, tokenXMLComment);\n        if (stream.match(\"![CDATA\", false)) {\n          state.tokenize = tokenCDATA;\n          return \"tag\";\n        }\n        if (stream.match(\"?\", false)) {\n          return chain(stream, state, tokenPreProcessing);\n        }\n        var isclose = stream.eat(\"/\");\n        stream.eatSpace();\n        var tagName = \"\",\n          c;\n        while (c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)) tagName += c;\n        return chain(stream, state, tokenTag(tagName, isclose));\n      }\n      // start code block\n      else if (ch == \"{\") {\n        pushStateStack(state, {\n          type: \"codeblock\"\n        });\n        return null;\n      }\n      // end code block\n      else if (ch == \"}\") {\n        popStateStack(state);\n        return null;\n      }\n      // if we're in an XML block\n      else if (isInXmlBlock(state)) {\n        if (ch == \">\") return \"tag\";else if (ch == \"/\" && stream.eat(\">\")) {\n          popStateStack(state);\n          return \"tag\";\n        } else return \"variable\";\n      }\n      // if a number\n      else if (/\\d/.test(ch)) {\n        stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n        return \"atom\";\n      }\n      // comment start\n      else if (ch === \"(\" && stream.eat(\":\")) {\n        pushStateStack(state, {\n          type: \"comment\"\n        });\n        return chain(stream, state, tokenComment);\n      }\n      // quoted string\n      else if (!isEQName && (ch === '\"' || ch === \"'\")) return chain(stream, state, tokenString(ch));\n      // variable\n      else if (ch === \"$\") {\n        return chain(stream, state, tokenVariable);\n      }\n      // assignment\n      else if (ch === \":\" && stream.eat(\"=\")) {\n        return \"keyword\";\n      }\n      // open paren\n      else if (ch === \"(\") {\n        pushStateStack(state, {\n          type: \"paren\"\n        });\n        return null;\n      }\n      // close paren\n      else if (ch === \")\") {\n        popStateStack(state);\n        return null;\n      }\n      // open paren\n      else if (ch === \"[\") {\n        pushStateStack(state, {\n          type: \"bracket\"\n        });\n        return null;\n      }\n      // close paren\n      else if (ch === \"]\") {\n        popStateStack(state);\n        return null;\n      } else {\n        var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n        // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n        if (isEQName && ch === '\\\"') while (stream.next() !== '\"') {}\n        if (isEQName && ch === '\\'') while (stream.next() !== '\\'') {}\n\n        // gobble up a word if the character is not known\n        if (!known) stream.eatWhile(/[\\w\\$_-]/);\n\n        // gobble a colon in the case that is a lib func type call fn:doc\n        var foundColon = stream.eat(\":\");\n\n        // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n        // which should get matched as a keyword\n        if (!stream.eat(\":\") && foundColon) {\n          stream.eatWhile(/[\\w\\$_-]/);\n        }\n        // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n        if (stream.match(/^[ \\t]*\\(/, false)) {\n          mightBeFunction = true;\n        }\n        // is the word a keyword?\n        var word = stream.current();\n        known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n        // if we think it's a function call but not yet known,\n        // set style to variable for now for lack of something better\n        if (mightBeFunction && !known) known = {\n          type: \"function_call\",\n          style: \"variable def\"\n        };\n\n        // if the previous word was element, attribute, axis specifier, this word should be the name of that\n        if (isInXmlConstructor(state)) {\n          popStateStack(state);\n          return \"variable\";\n        }\n        // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n        // push the stack so we know to look for it on the next word\n        if (word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {\n          type: \"xmlconstructor\"\n        });\n\n        // if the word is known, return the details of that else just call this a generic 'word'\n        return known ? known.style : \"variable\";\n      }\n    }\n\n    // handle comments, including nested\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        maybeNested = false,\n        nestedCount = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          if (nestedCount > 0) nestedCount--;else {\n            popStateStack(state);\n            break;\n          }\n        } else if (ch == \":\" && maybeNested) {\n          nestedCount++;\n        }\n        maybeEnd = ch == \":\";\n        maybeNested = ch == \"(\";\n      }\n      return \"comment\";\n    }\n\n    // tokenizer for string literals\n    // optionally pass a tokenizer function to set state.tokenize back to when finished\n    function tokenString(quote, f) {\n      return function (stream, state) {\n        var ch;\n        if (isInString(state) && stream.current() == quote) {\n          popStateStack(state);\n          if (f) state.tokenize = f;\n          return \"string\";\n        }\n        pushStateStack(state, {\n          type: \"string\",\n          name: quote,\n          tokenize: tokenString(quote, f)\n        });\n\n        // if we're in a string and in an XML block, allow an embedded code block\n        if (stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n          state.tokenize = tokenBase;\n          return \"string\";\n        }\n        while (ch = stream.next()) {\n          if (ch == quote) {\n            popStateStack(state);\n            if (f) state.tokenize = f;\n            break;\n          } else {\n            // if we're in a string and in an XML block, allow an embedded code block in an attribute\n            if (stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n              state.tokenize = tokenBase;\n              return \"string\";\n            }\n          }\n        }\n        return \"string\";\n      };\n    }\n\n    // tokenizer for variables\n    function tokenVariable(stream, state) {\n      var isVariableChar = /[\\w\\$_-]/;\n\n      // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n      if (stream.eat(\"\\\"\")) {\n        while (stream.next() !== '\\\"') {}\n        ;\n        stream.eat(\":\");\n      } else {\n        stream.eatWhile(isVariableChar);\n        if (!stream.match(\":=\", false)) stream.eat(\":\");\n      }\n      stream.eatWhile(isVariableChar);\n      state.tokenize = tokenBase;\n      return \"variable\";\n    }\n\n    // tokenizer for XML tags\n    function tokenTag(name, isclose) {\n      return function (stream, state) {\n        stream.eatSpace();\n        if (isclose && stream.eat(\">\")) {\n          popStateStack(state);\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        // self closing tag without attributes?\n        if (!stream.eat(\"/\")) pushStateStack(state, {\n          type: \"tag\",\n          name: name,\n          tokenize: tokenBase\n        });\n        if (!stream.eat(\">\")) {\n          state.tokenize = tokenAttribute;\n          return \"tag\";\n        } else {\n          state.tokenize = tokenBase;\n        }\n        return \"tag\";\n      };\n    }\n\n    // tokenizer for XML attributes\n    function tokenAttribute(stream, state) {\n      var ch = stream.next();\n      if (ch == \"/\" && stream.eat(\">\")) {\n        if (isInXmlAttributeBlock(state)) popStateStack(state);\n        if (isInXmlBlock(state)) popStateStack(state);\n        return \"tag\";\n      }\n      if (ch == \">\") {\n        if (isInXmlAttributeBlock(state)) popStateStack(state);\n        return \"tag\";\n      }\n      if (ch == \"=\") return null;\n      // quoted string\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch, tokenAttribute));\n      if (!isInXmlAttributeBlock(state)) pushStateStack(state, {\n        type: \"attribute\",\n        tokenize: tokenAttribute\n      });\n      stream.eat(/[a-zA-Z_:]/);\n      stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n      stream.eatSpace();\n\n      // the case where the attribute has not value and the tag was closed\n      if (stream.match(\">\", false) || stream.match(\"/\", false)) {\n        popStateStack(state);\n        state.tokenize = tokenBase;\n      }\n      return \"attribute\";\n    }\n\n    // handle comments, including nested\n    function tokenXMLComment(stream, state) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"-\" && stream.match(\"->\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment\";\n        }\n      }\n    }\n\n    // handle CDATA\n    function tokenCDATA(stream, state) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"]\" && stream.match(\"]\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment\";\n        }\n      }\n    }\n\n    // handle preprocessing instructions\n    function tokenPreProcessing(stream, state) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"?\" && stream.match(\">\", true)) {\n          state.tokenize = tokenBase;\n          return \"comment meta\";\n        }\n      }\n    }\n\n    // functions to test the current context of the state\n    function isInXmlBlock(state) {\n      return isIn(state, \"tag\");\n    }\n    function isInXmlAttributeBlock(state) {\n      return isIn(state, \"attribute\");\n    }\n    function isInXmlConstructor(state) {\n      return isIn(state, \"xmlconstructor\");\n    }\n    function isInString(state) {\n      return isIn(state, \"string\");\n    }\n    function isEQNameAhead(stream) {\n      // assume we've already eaten a quote (\")\n      if (stream.current() === '\"') return stream.match(/^[^\\\"]+\\\"\\:/, false);else if (stream.current() === '\\'') return stream.match(/^[^\\\"]+\\'\\:/, false);else return false;\n    }\n    function isIn(state, type) {\n      return state.stack.length && state.stack[state.stack.length - 1].type == type;\n    }\n    function pushStateStack(state, newState) {\n      state.stack.push(newState);\n    }\n    function popStateStack(state) {\n      state.stack.pop();\n      var reinstateTokenize = state.stack.length && state.stack[state.stack.length - 1].tokenize;\n      state.tokenize = reinstateTokenize || tokenBase;\n    }\n\n    // the interface for the mode API\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          cc: [],\n          stack: []\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"(:\",\n      blockCommentEnd: \":)\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/xquery\", \"xquery\");\n});"],"sourceRoot":""}