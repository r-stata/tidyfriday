{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/elm/elm.js"],"names":["CodeMirror","defineMode","switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","nest","eol","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","module","where","import","exposing","port","startState","copyState","s","lineComment","token","stream","state","word","current","hasOwnProperty","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/49.ffbd3522.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function () {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal() {\n      return function (source, setState) {\n        if (source.eatWhile(spacesRE)) {\n          return null;\n        }\n        var char = source.next();\n        if (specialRE.test(char)) {\n          return char === '{' && source.eat('-') ? switchState(source, setState, chompMultiComment(1)) : char === '[' && source.match('glsl|') ? switchState(source, setState, chompGlsl) : 'builtin';\n        }\n        if (char === '\\'') {\n          return switchState(source, setState, chompChar);\n        }\n        if (char === '\"') {\n          return source.eat('\"') ? source.eat('\"') ? switchState(source, setState, chompMultiString) : 'string' : switchState(source, setState, chompSingleString);\n        }\n        if (upperRE.test(char)) {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n        if (lowerRE.test(char)) {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n        if (digitRE.test(char)) {\n          if (char === '0') {\n            if (source.eat(/[xX]/)) {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          } else {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.')) {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          if (source.eat(/[eE]/)) {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          return \"number\";\n        }\n        if (symbolRE.test(char)) {\n          if (char === '-' && source.eat('-')) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n        if (char === '_') {\n          return \"keyword\";\n        }\n        return \"error\";\n      };\n    }\n    function chompMultiComment(nest) {\n      if (nest == 0) {\n        return normal();\n      }\n      return function (source, setState) {\n        while (!source.eol()) {\n          var char = source.next();\n          if (char == '{' && source.eat('-')) {\n            ++nest;\n          } else if (char == '-' && source.eat('}')) {\n            --nest;\n            if (nest === 0) {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      };\n    }\n    function chompMultiString(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n    function chompSingleString(source, setState) {\n      while (source.skipTo('\\\\\"')) {\n        source.next();\n        source.next();\n      }\n      if (source.skipTo('\"')) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n    function chompChar(source, setState) {\n      while (source.skipTo(\"\\\\'\")) {\n        source.next();\n        source.next();\n      }\n      if (source.skipTo(\"'\")) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n    function chompGlsl(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n        if (char === '|' && source.eat(']')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n    return {\n      startState: function startState() {\n        return {\n          f: normal()\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f\n        };\n      },\n      lineComment: '--',\n      token: function token(stream, state) {\n        var type = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var word = stream.current();\n        return wellKnownWords.hasOwnProperty(word) ? 'keyword' : type;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});"],"sourceRoot":""}