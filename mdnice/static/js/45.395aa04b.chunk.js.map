{"version":3,"sources":["../node_modules/_codemirror@5.65.12@codemirror/mode/dylan/dylan.js"],"names":["CodeMirror","forEach","arr","f","i","length","some","defineMode","_config","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","keyword","definition","simpleDefinition","wordLookup","styleLookup","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/45.395aa04b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function forEach(arr, f) {\n    for (var i = 0; i < arr.length; i++) f(arr[i], i);\n  }\n  function some(arr, f) {\n    for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;\n    return false;\n  }\n  CodeMirror.defineMode(\"dylan\", function (_config) {\n    // Words\n    var words = {\n      // Words that introduce unnamed definitions like \"define interface\"\n      unnamedDefinition: [\"interface\"],\n      // Words that introduce simple named definitions like \"define library\"\n      namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n      // Words that introduce type definitions like \"define class\".\n      // These are also parameterized like \"define method\" and are\n      // appended to otherParameterizedDefinitionWords\n      typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n      // Words that introduce trickier definitions like \"define method\".\n      // These require special definitions to be added to startExpressions\n      otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n      // Words that introduce module constant definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      constantSimpleDefinition: [\"constant\"],\n      // Words that introduce module variable definitions.\n      // These must also be simple definitions and are\n      // appended to otherSimpleDefinitionWords\n      variableSimpleDefinition: [\"variable\"],\n      // Other words that introduce simple definitions\n      // (without implicit bodies).\n      otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n      // Words that begin statements with implicit bodies.\n      statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n      // Patterns that act as separators in compound statements.\n      // This may include any general pattern that must be indented\n      // specially.\n      separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n      // Keywords that do not require special indentation handling,\n      // but which should be highlighted\n      other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n      // Condition signaling function calls\n      signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n    };\n    words[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\n    words[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\n    words[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\n    words[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\n    words[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]);\n\n    // Patterns\n    var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n    var symbol = new RegExp(\"^\" + symbolPattern);\n    var patterns = {\n      // Symbols with special syntax\n      symbolKeyword: symbolPattern + \":\",\n      symbolClass: \"<\" + symbolPattern + \">\",\n      symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n      symbolConstant: \"\\\\$\" + symbolPattern\n    };\n    var patternStyles = {\n      symbolKeyword: \"atom\",\n      symbolClass: \"tag\",\n      symbolGlobal: \"variable-2\",\n      symbolConstant: \"variable-3\"\n    };\n\n    // Compile all patterns to regular expressions\n    for (var patternName in patterns) if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n    // Names beginning \"with-\" and \"without-\" are commonly\n    // used as statement macro\n    patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n    var styles = {};\n    styles[\"keyword\"] = \"keyword\";\n    styles[\"definition\"] = \"def\";\n    styles[\"simpleDefinition\"] = \"def\";\n    styles[\"signalingCalls\"] = \"builtin\";\n\n    // protected words lookup table\n    var wordLookup = {};\n    var styleLookup = {};\n    forEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n      forEach(words[type], function (word) {\n        wordLookup[word] = type;\n        styleLookup[word] = styles[type];\n      });\n    });\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      // String\n      var ch = stream.peek();\n      if (ch == \"'\" || ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString(ch, \"string\"));\n      }\n      // Comment\n      else if (ch == \"/\") {\n        stream.next();\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, tokenComment);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n        stream.backUp(1);\n      }\n      // Decimal\n      else if (/[+\\-\\d\\.]/.test(ch)) {\n        if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n          return \"number\";\n        }\n      }\n      // Hash\n      else if (ch == \"#\") {\n        stream.next();\n        // Symbol with string syntax\n        ch = stream.peek();\n        if (ch == '\"') {\n          stream.next();\n          return chain(stream, state, tokenString('\"', \"string\"));\n        }\n        // Binary number\n        else if (ch == \"b\") {\n          stream.next();\n          stream.eatWhile(/[01]/);\n          return \"number\";\n        }\n        // Hex number\n        else if (ch == \"x\") {\n          stream.next();\n          stream.eatWhile(/[\\da-f]/i);\n          return \"number\";\n        }\n        // Octal number\n        else if (ch == \"o\") {\n          stream.next();\n          stream.eatWhile(/[0-7]/);\n          return \"number\";\n        }\n        // Token concatenation in macros\n        else if (ch == '#') {\n          stream.next();\n          return \"punctuation\";\n        }\n        // Sequence literals\n        else if (ch == '[' || ch == '(') {\n          stream.next();\n          return \"bracket\";\n          // Hash symbol\n        } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n          return \"atom\";\n        } else {\n          stream.eatWhile(/[-a-zA-Z]/);\n          return \"error\";\n        }\n      } else if (ch == \"~\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          ch = stream.peek();\n          if (ch == \"=\") {\n            stream.next();\n            return \"operator\";\n          }\n          return \"operator\";\n        }\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          return \"operator\";\n        } else if (ch == \":\") {\n          stream.next();\n          return \"punctuation\";\n        }\n      } else if (\"[](){}\".indexOf(ch) != -1) {\n        stream.next();\n        return \"bracket\";\n      } else if (\".,\".indexOf(ch) != -1) {\n        stream.next();\n        return \"punctuation\";\n      } else if (stream.match(\"end\")) {\n        return \"keyword\";\n      }\n      for (var name in patterns) {\n        if (patterns.hasOwnProperty(name)) {\n          var pattern = patterns[name];\n          if (pattern instanceof Array && some(pattern, function (p) {\n            return stream.match(p);\n          }) || stream.match(pattern)) return patternStyles[name];\n        }\n      }\n      if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n        stream.next();\n        return \"operator\";\n      }\n      if (stream.match(\"define\")) {\n        return \"def\";\n      } else {\n        stream.eatWhile(/[\\w\\-]/);\n        // Keyword\n        if (wordLookup.hasOwnProperty(stream.current())) {\n          return styleLookup[stream.current()];\n        } else if (stream.current().match(symbol)) {\n          return \"variable\";\n        } else {\n          stream.next();\n          return \"variable-2\";\n        }\n      }\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        maybeNested = false,\n        nestedCount = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          if (nestedCount > 0) {\n            nestedCount--;\n          } else {\n            state.tokenize = tokenBase;\n            break;\n          }\n        } else if (ch == \"*\" && maybeNested) {\n          nestedCount++;\n        }\n        maybeEnd = ch == \"*\";\n        maybeNested = ch == \"/\";\n      }\n      return \"comment\";\n    }\n    function tokenString(quote, style) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) {\n          state.tokenize = tokenBase;\n        }\n        return style;\n      };\n    }\n\n    // Interface\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          currentIndent: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n});"],"sourceRoot":""}