(window.webpackJsonp=window.webpackJsonp||[]).push([[25,58],{682:function(e,t,n){!function(e){"use strict";e.defineMode("haskell",function(e,a){function i(e,t,n){return t(n),n(e,t)}var o=/[a-z_]/,l=/[A-Z]/,u=/\d/,s=/[0-9A-Fa-f]/,f=/[0-7]/,c=/[a-z_A-Z0-9'\xa1-\uffff]/,d=/[-!#$%&*+.\/<=>?@\\^|~:]/,m=/[(),;[\]`{}]/,h=/[ \t\v\f]/;function p(e,t){if(e.eatWhile(h))return null;var n=e.next();if(m.test(n))return"{"==n&&e.eat("-")?(r="comment",e.eat("#")&&(r="meta"),i(e,t,function a(i,o){return 0==o?p:function(e,t){for(var n=o;!e.eol();){var r=e.next();if("{"==r&&e.eat("-"))++n;else if("-"==r&&e.eat("}")&&0==--n)return t(p),i}return t(a(i,n)),i}}(r,1))):null;if("'"==n)return e.eat("\\"),e.next(),e.eat("'")?"string":"string error";if('"'==n)return i(e,t,g);if(l.test(n))return e.eatWhile(c),e.eat(".")?"qualifier":"variable-2";if(o.test(n))return e.eatWhile(c),"variable";if(u.test(n)){if("0"==n){if(e.eat(/[xX]/))return e.eatWhile(s),"integer";if(e.eat(/[oO]/))return e.eatWhile(f),"number"}e.eatWhile(u);var r="number";return e.match(/^\.\d+/)&&(r="number"),e.eat(/[eE]/)&&(r="number",e.eat(/[-+]/),e.eatWhile(u)),r}return"."==n&&e.eat(".")?"keyword":d.test(n)?"-"==n&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(d))?(e.skipToEnd(),"comment"):(r=":"==n?"variable-2":"variable",e.eatWhile(d),r):"error"}function g(e,t){for(;!e.eol();){var n=e.next();if('"'==n)return t(p),"string";if("\\"==n){if(e.eol()||e.eat(h))return t(r),"string";e.eat("&")||e.next()}}return t(p),"string error"}function r(e,t){return e.eat("\\")?i(e,t,g):(e.next(),t(p),"error")}var w=function(){var n={};function e(t){return function(){for(var e=0;e<arguments.length;e++)n[arguments[e]]=t}}e("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),e("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),e("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),e("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),e("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var t=a.overrideKeywords;if(t)for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);return n}();return{startState:function(){return{f:p}},copyState:function(e){return{f:e.f}},token:function(e,t){var n=t.f(e,function(e){t.f=e}),e=e.current();return w.hasOwnProperty(e)?w[e]:n},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}}),e.defineMIME("text/x-haskell","haskell")}(n(34))},723:function(e,t,n){!function(r){"use strict";r.defineMode("haskell-literate",function(e,t){var n=r.getMode(e,t&&t.base||"haskell");return{startState:function(){return{inCode:!1,baseState:r.startState(n)}},token:function(e,t){return e.sol()&&(t.inCode=e.eat(">"))?"meta":t.inCode?n.token(e,t.baseState):(e.skipToEnd(),"comment")},innerMode:function(e){return e.inCode?{state:e.baseState,mode:n}:null}}},"haskell"),r.defineMIME("text/x-literate-haskell","haskell-literate")}(n(34),n(682))}}]);