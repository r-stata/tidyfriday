this.workbox=this.workbox||{},this.workbox.strategies=function(u,h,r,i,l,p){"use strict";try{self.workbox.v["workbox:strategies:3.6.3"]=1}catch(e){}var m=(e,t)=>`Using ${e} to `+`respond to '${(e=>{e=new URL(e,location);return e.origin===location.origin?e.pathname:e.href})(t.url)}'`,g=e=>{e&&(u.logger.groupCollapsed("View the final response here."),u.logger.unprefixed.log(e),u.logger.groupEnd())};class e{constructor(e={}){this._cacheName=r.cacheNames.getRuntimeName(e.cacheName),this._plugins=e.plugins||[],this._fetchOptions=e.fetchOptions||null,this._matchOptions=e.matchOptions||null}handle({event:e}){var t=this;return babelHelpers.asyncToGenerator(function*(){return h.assert.isInstance(e,FetchEvent,{moduleName:"workbox-strategies",className:"CacheFirst",funcName:"handle",paramName:"event"}),t.makeRequest({event:e,request:e.request})})()}makeRequest({event:a,request:n}){var o=this;return babelHelpers.asyncToGenerator(function*(){var e,t=[];"string"==typeof n&&(n=new Request(n)),h.assert.isInstance(n,Request,{moduleName:"workbox-strategies",className:"CacheFirst",funcName:"makeRequest",paramName:"request"});let r=yield i.cacheWrapper.match({cacheName:o._cacheName,request:n,event:a,matchOptions:o._matchOptions,plugins:o._plugins}),s;if(r)t.push(`Found a cached response in the '${o._cacheName}' cache.`);else{t.push(`No response found in the '${o._cacheName}' cache. `+"Will respond with a network request.");try{r=yield o._getFromNetwork(n,a)}catch(e){s=e}r?t.push("Got response from network."):t.push("Unable to get a response from the network.")}u.logger.groupCollapsed(m("CacheFirst",n));for(e of t)u.logger.log(e);if(g(r),u.logger.groupEnd(),s)throw s;return r})()}_getFromNetwork(r,s){var a=this;return babelHelpers.asyncToGenerator(function*(){var e=yield l.fetchWrapper.fetch({request:r,event:s,fetchOptions:a._fetchOptions,plugins:a._plugins}),t=e.clone(),t=i.cacheWrapper.put({cacheName:a._cacheName,request:r,response:t,event:s,plugins:a._plugins});if(s)try{s.waitUntil(t)}catch(e){u.logger.warn("Unable to ensure service worker stays alive when "+`updating cache for '${p.getFriendlyURL(s.request.url)}'.`)}return e})()}}class t{constructor(e={}){this._cacheName=r.cacheNames.getRuntimeName(e.cacheName),this._plugins=e.plugins||[],this._matchOptions=e.matchOptions||null}handle({event:e}){var t=this;return babelHelpers.asyncToGenerator(function*(){return h.assert.isInstance(e,FetchEvent,{moduleName:"workbox-strategies",className:"CacheOnly",funcName:"handle",paramName:"event"}),t.makeRequest({event:e,request:e.request})})()}makeRequest({event:t,request:r}){var s=this;return babelHelpers.asyncToGenerator(function*(){"string"==typeof r&&(r=new Request(r)),h.assert.isInstance(r,Request,{moduleName:"workbox-strategies",className:"CacheOnly",funcName:"makeRequest",paramName:"request"});var e=yield i.cacheWrapper.match({cacheName:s._cacheName,request:r,event:t,matchOptions:s._matchOptions,plugins:s._plugins});return u.logger.groupCollapsed(m("CacheOnly",r)),e?(u.logger.log(`Found a cached response in the '${s._cacheName}'`+" cache."),g(e)):u.logger.log(`No response found in the '${s._cacheName}' cache.`),u.logger.groupEnd(),e})()}}var s={cacheWillUpdate:({response:e})=>e.ok||0===e.status?e:null};class a{constructor(e={}){var t;this._cacheName=r.cacheNames.getRuntimeName(e.cacheName),e.plugins?(t=e.plugins.some(e=>!!e.cacheWillUpdate),this._plugins=t?e.plugins:[s,...e.plugins]):this._plugins=[s],this._networkTimeoutSeconds=e.networkTimeoutSeconds,this._networkTimeoutSeconds&&h.assert.isType(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"constructor",paramName:"networkTimeoutSeconds"}),this._fetchOptions=e.fetchOptions||null,this._matchOptions=e.matchOptions||null}handle({event:e}){var t=this;return babelHelpers.asyncToGenerator(function*(){return h.assert.isInstance(e,FetchEvent,{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"handle",paramName:"event"}),t.makeRequest({event:e,request:e.request})})()}makeRequest({event:c,request:i}){var l=this;return babelHelpers.asyncToGenerator(function*(){var e,t=[],r=("string"==typeof i&&(i=new Request(i)),h.assert.isInstance(i,Request,{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"handle",paramName:"makeRequest"}),[]);let s;l._networkTimeoutSeconds&&({id:n,promise:e}=l._getTimeoutPromise({request:i,event:c,logs:t}),s=n,r.push(e));var a,n=l._getNetworkPromise({timeoutId:s,request:i,event:c,logs:t});r.push(n);let o=yield Promise.race(r);o=o||(yield n),u.logger.groupCollapsed(m("NetworkFirst",i));for(a of t)u.logger.log(a);return g(o),u.logger.groupEnd(),o})()}_getTimeoutPromise({request:s,logs:a,event:n}){var o=this;let c;return{promise:new Promise(e=>{function t(){return r.apply(this,arguments)}var r;r=babelHelpers.asyncToGenerator(function*(){a.push("Timing out the network response at "+o._networkTimeoutSeconds+" seconds."),e(yield o._respondFromCache({request:s,event:n}))});c=setTimeout(t,1e3*this._networkTimeoutSeconds)}),id:c}}_getNetworkPromise({timeoutId:s,request:a,logs:n,event:o}){var c=this;return babelHelpers.asyncToGenerator(function*(){let t,e;try{e=yield l.fetchWrapper.fetch({request:a,event:o,fetchOptions:c._fetchOptions,plugins:c._plugins})}catch(e){t=e}if(s&&clearTimeout(s),e?n.push("Got response from network."):n.push("Unable to get a response from the network. Will respond with a cached response."),t||!e)(e=yield c._respondFromCache({request:a,event:o}))?n.push(`Found a cached response in the '${c._cacheName}'`+" cache."):n.push(`No response found in the '${c._cacheName}' cache.`);else{var r=e.clone(),r=i.cacheWrapper.put({cacheName:c._cacheName,request:a,response:r,event:o,plugins:c._plugins});if(o)try{o.waitUntil(r)}catch(e){u.logger.warn("Unable to ensure service worker stays alive when "+`updating cache for '${p.getFriendlyURL(o.request.url)}'.`)}}return e})()}_respondFromCache({event:e,request:t}){return i.cacheWrapper.match({cacheName:this._cacheName,request:t,event:e,matchOptions:this._matchOptions,plugins:this._plugins})}}class n{constructor(e={}){this._cacheName=r.cacheNames.getRuntimeName(e.cacheName),this._plugins=e.plugins||[],this._fetchOptions=e.fetchOptions||null}handle({event:e}){var t=this;return babelHelpers.asyncToGenerator(function*(){return h.assert.isInstance(e,FetchEvent,{moduleName:"workbox-strategies",className:"NetworkOnly",funcName:"handle",paramName:"event"}),t.makeRequest({event:e,request:e.request})})()}makeRequest({event:r,request:s}){var a=this;return babelHelpers.asyncToGenerator(function*(){"string"==typeof s&&(s=new Request(s)),h.assert.isInstance(s,Request,{moduleName:"workbox-strategies",className:"NetworkOnly",funcName:"handle",paramName:"request"});let t,e;try{e=yield l.fetchWrapper.fetch({request:s,event:r,fetchOptions:a._fetchOptions,plugins:a._plugins})}catch(e){t=e}if(u.logger.groupCollapsed(m("NetworkOnly",s)),e?u.logger.log("Got response from network."):u.logger.log("Unable to get a response from the network."),g(e),u.logger.groupEnd(),t)throw t;return e})()}}class o{constructor(e={}){var t;this._cacheName=r.cacheNames.getRuntimeName(e.cacheName),this._plugins=e.plugins||[],e.plugins?(t=e.plugins.some(e=>!!e.cacheWillUpdate),this._plugins=t?e.plugins:[s,...e.plugins]):this._plugins=[s],this._fetchOptions=e.fetchOptions||null,this._matchOptions=e.matchOptions||null}handle({event:e}){var t=this;return babelHelpers.asyncToGenerator(function*(){return h.assert.isInstance(e,FetchEvent,{moduleName:"workbox-strategies",className:"StaleWhileRevalidate",funcName:"handle",paramName:"event"}),t.makeRequest({event:e,request:e.request})})()}makeRequest({event:a,request:n}){var o=this;return babelHelpers.asyncToGenerator(function*(){var e,t=[],r=("string"==typeof n&&(n=new Request(n)),h.assert.isInstance(n,Request,{moduleName:"workbox-strategies",className:"StaleWhileRevalidate",funcName:"handle",paramName:"request"}),o._getFromNetwork({request:n,event:a}));let s=yield i.cacheWrapper.match({cacheName:o._cacheName,request:n,event:a,matchOptions:o._matchOptions,plugins:o._plugins});if(s){if(t.push(`Found a cached response in the '${o._cacheName}'`+" cache. Will update with the network response in the background."),a)try{a.waitUntil(r)}catch(e){u.logger.warn("Unable to ensure service worker stays alive when "+`updating cache for '${p.getFriendlyURL(a.request.url)}'.`)}}else t.push(`No response found in the '${o._cacheName}' cache. `+"Will wait for the network response."),s=yield r;u.logger.groupCollapsed(m("StaleWhileRevalidate",n));for(e of t)u.logger.log(e);return g(s),u.logger.groupEnd(),s})()}_getFromNetwork({request:r,event:s}){var a=this;return babelHelpers.asyncToGenerator(function*(){var e=yield l.fetchWrapper.fetch({request:r,event:s,fetchOptions:a._fetchOptions,plugins:a._plugins}),t=i.cacheWrapper.put({cacheName:a._cacheName,request:r,response:e.clone(),event:s,plugins:a._plugins});if(s)try{s.waitUntil(t)}catch(e){u.logger.warn("Unable to ensure service worker stays alive when "+`updating cache for '${p.getFriendlyURL(s.request.url)}'.`)}return e})()}}var c=Object.freeze({CacheFirst:e,CacheOnly:t,NetworkFirst:a,NetworkOnly:n,StaleWhileRevalidate:o});const N={cacheFirst:e,cacheOnly:t,networkFirst:a,networkOnly:n,staleWhileRevalidate:o},d={};return Object.keys(N).forEach(t=>{d[t]=(e={})=>{return new N[t](Object.assign(e))}}),Object.assign(d,c)}(workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private);