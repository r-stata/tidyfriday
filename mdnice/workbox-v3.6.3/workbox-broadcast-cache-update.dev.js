this.workbox=this.workbox||{},this.workbox.broadcastUpdate=function(e,r,o,c){"use strict";try{self.workbox.v["workbox:broadcast-cache-update:3.6.3"]=1}catch(e){}var n={CACHE_UPDATED:"CACHE_UPDATED"};const d=(e,a,s,t)=>{"BroadcastChannel"in self&&e?(c.assert.isInstance(e,BroadcastChannel,{moduleName:"workbox-broadcast-cache-update",className:"~",funcName:"broadcastUpdate",paramName:"channel"}),c.assert.isType(a,"string",{moduleName:"workbox-broadcast-cache-update",className:"~",funcName:"broadcastUpdate",paramName:"cacheName"}),c.assert.isType(s,"string",{moduleName:"workbox-broadcast-cache-update",className:"~",funcName:"broadcastUpdate",paramName:"url"}),c.assert.isType(t,"string",{moduleName:"workbox-broadcast-cache-update",className:"~",funcName:"broadcastUpdate",paramName:"source"}),e.postMessage({type:n.CACHE_UPDATED,meta:t,payload:{cacheName:a,updatedUrl:s}})):o.logger.debug(s+" was updated, but the Broadcast Channel API is not available in the current browser.")};class s{constructor(e,{headersToCheck:a,source:s}={}){if("string"!=typeof e||0===e.length)throw new r.WorkboxError("channel-name-required");this._channelName=e,this._headersToCheck=a||["content-length","etag","last-modified"],this._source=s||"workbox-broadcast-cache-update"}_getChannel(){return"BroadcastChannel"in self&&!this._channel&&(this._channel=new BroadcastChannel(this._channelName)),this._channel}notifyIfUpdated(e,a,s,t){((s,t,e)=>{if(s instanceof Response&&t instanceof Response)return e.some(e=>s.headers.has(e)&&t.headers.has(e))?e.every(e=>{var a=s.headers.has(e)===t.headers.has(e),e=s.headers.get(e)===t.headers.get(e);return a&&e}):(o.logger.warn("Unable to determine where the response has been updated because none of the headers that would be checked are present."),o.logger.debug("Attempting to compare the following: ",s,t,e),!0);throw new r.WorkboxError("invalid-responses-are-same-args")})(e,a,this._headersToCheck)||d(this._getChannel(),t,s,this._source)}}return e.BroadcastCacheUpdate=s,e.Plugin=class{constructor(e,a){this._broadcastUpdate=new s(e,a)}cacheDidUpdate({cacheName:e,oldResponse:a,newResponse:s,request:t}){c.assert.isType(e,"string",{moduleName:"workbox-broadcast-cache-update",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),c.assert.isInstance(s,Response,{moduleName:"workbox-broadcast-cache-update",className:"Plugin",funcName:"cacheDidUpdate",paramName:"newResponse"}),c.assert.isInstance(t,Request,{moduleName:"workbox-broadcast-cache-update",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"}),a&&this._broadcastUpdate.notifyIfUpdated(a,s,t.url,e)}},e.broadcastUpdate=d,e.messageTypes=n,e}({},workbox.core._private,workbox.core._private,workbox.core._private);